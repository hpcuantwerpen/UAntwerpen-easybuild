easyblock = 'Bundle'

local_buildset         = '2020a'
local_gcc_version      = '9.3.0'

local_LuaJIT_version =         '2.0.5'           # https://luajit.org/download.html
local_Perl_version =           '5.30.2'          # https://www.perl.org/get.html

local_BCFtools_version =      '1.10.2' # https://github.com/samtools/bcftools/releases
local_BEDTools_version =      '2.29.2' # https://github.com/arq5x/bedtools2/releases
local_CDHIT_version =         '4.8.1'  # https://github.com/weizhongli/cdhit/releases
local_ClonalFrameML_version = '1.12'   # https://github.com/xavierdidelot/ClonalFrameML/releases
local_fastp_version =         '0.20.1' # https://github.com/OpenGene/fastp/releases
local_FastTree_version =      '2.1.11' # http://www.microbesonline.org/fasttree/
local_HTSlib_version =        '1.10.2' # https://github.com/samtools/htslib/releases
local_MCL_version =           '14.137' # https://micans.org/mcl/
local_MEGAHIT_version =       '1.2.9' # https://github.com/voutcn/megahit/releases
local_miniasm_version =  '0.3'    # https://github.com/lh3/minimap2/releases
local_minimap2_version =      '2.17'   # https://github.com/lh3/minimap2/releases
local_MUSCLE_version =        '3.8.31' # http://drive5.com/muscle/downloads.htm
local_Racon_version =         '1.4.13' # https://github.com/isovic/racon/releases
local_SAMtools_version =      '1.10'   # https://github.com/samtools/samtools/releases
local_VSEARCH_version =       '2.14.2' # https://github.com/torognes/vsearch/releases

name =          'BioTools'
version =       '2020a.00'

local_version_subs = {
    'bedtools':      local_BEDTools_version,
    'CDHIT':         local_CDHIT_version,
    'ClonalFrameML': local_ClonalFrameML_version,
    'fastp':         local_fastp_version,
    'FastTree':      local_FastTree_version, 
    'HTSlib':        local_HTSlib_version,
    'BCFtools':      local_BCFtools_version,
    'SAMtools':      local_SAMtools_version,
    'MCL':           local_MCL_version,
    'MEGAHIT':       local_MEGAHIT_version,
    'miniasm':       local_miniasm_version,
    'minimap2':      local_minimap2_version,
    'MUSCLE':        local_MUSCLE_version,
    'Racon':         local_Racon_version,
    'VSEARCH':       local_VSEARCH_version,
}

homepage = '(none)'

# We list all libraries in a whatis line so that they can be found by module keyword.
# Contrary to what the LMOD documentation makes you believe, it seems that help is
# not searched when using module keyword.
whatis = [
    'Name:        %(name)s',
    'Version:     %(version)s',
    'Description: A number of bioinformatics tools, installed together as a bundle',
    'Contains:    BEDTools %(bedtools)s, ' % local_version_subs + 
                 'CD-HIT %(CDHIT)s, ' % local_version_subs + 
                 'ClonalRangeML %(ClonalFrameML)s, ' % local_version_subs + 
                 'HTSlib %(HTSlib)s / BCFtools %(BCFtools)s / SAMtools %(SAMtools)s, ' % local_version_subs + 
                 'fastp %(fastp)s, ' % local_version_subs + 
                 'FastTree %(FastTree)s' % local_version_subs + 
                 'MCL %(MCL)s, ' % local_version_subs +
                 'MEGAHIT %(MEGAHIT)s, ' % local_version_subs +
                 'miniasm %(miniasm)s, ' % local_version_subs +
                 'minimap2 %(minimap2)s, ' % local_version_subs +
                 'MUSCLE %(MUSCLE)s, ' % local_version_subs + 
                 'Racon%(Racon)s, ' % local_version_subs +
                 'VSEARCH %(VSEARCH)s' % local_version_subs
]

description = """
This module provides a number of useful bio-informatics tools.

Overview of the included tools and libraries:

* bedtools (version %(bedtools)s): Collectively, the bedtools utilities are a 
  swiss-army knife of tools for a wide-range of genomics analysis tasks. The 
  most widely-used tools enable genome arithmetic: that is, set theory on the genome. 
  For example, bedtools allows one to intersect, merge, count, complement, and 
  shuffle genomic intervals from multiple files in widely-used genomic file formats 
  such as BAM, BED, GFF/GTF, VCF. While each individual tool is designed to do a 
  relatively simple task (e.g., intersect two interval files), quite sophisticated 
  analyses can be conducted by combining multiple bedtools operations on the UNIX 
  command line.
  bedtools is developed in the Quinlan laboratory at the University of Utah 
  and benefits from fantastic contributions made by scientists worldwide.
* CD-HIT (version %(CDHIT)s) is very fast and can handle extremely large databases. CD-HIT helps 
  to significantly reduce the computational and manual efforts in many sequence 
   analysis tasks and aids in understanding the data structure and correct the 
  bias within a dataset.
  The CD-HIT package has CD-HIT, CD-HIT-2D, CD-HIT-EST, CD-HIT-EST-2D, 
  CD-HIT-454, CD-HIT-PARA, PSI-CD-HIT, CD-HIT-OTU, CD-HIT-LAP, CD-HIT-DUP and 
  over a dozen scripts.
   * CD-HIT (CD-HIT-EST) clusters similar proteins (DNAs) into clusters that meet 
     a user-defined similarity threshold.
   * CD-HIT-2D (CD-HIT-EST-2D) compares 2 datasets and identifies the sequences in db2 
     that are similar to db1 above a threshold.
   * CD-HIT-454 identifies natural and artificial duplicates from pyrosequencing reads.
   * CD-HIT-OTU clusters rRNA tags into OTUs
   * CD-HIT-DUP identifies duplicates from single or paired Illumina reads
   * CD-HIT-LAP identifies overlapping reads
  The usage of other programs and scripts can be found in CD-HIT user's guide.
  CD-HIT is currently maintained by the Dr. Li's group (http://weizhongli-lab.org/) at 
  J Craig Venter Institute. We thank the support from National Center for Research Resources (
  Grant # 1R01RR025030, 2008-2011). We thank all users that report bugs, give us suggestions 
  and comments.
* ClonalFrameML (version %(ClonalFrameML)s), a software package that performs efficient inference of 
  recombination in bacterial genomes. ClonalFrameML was created by Xavier Didelot 
  and Daniel Wilson. ClonalFrameML can be applied to any type of aligned sequence 
  data, but is especially aimed at analysis of whole genome sequences. It is able 
  to compare hundreds of whole genomes in a matter of hours on a standard Desktop 
  computer. There are three main outputs from a run of ClonalFrameML: a phylogeny 
  with branch lengths corrected to account for recombination, an estimation of the 
  key parameters of the recombination process, and a genomic map of where 
  recombination took place for each branch of the phylogeny.
  ClonalFrameML is a maximum likelihood implementation of the Bayesian software 
  ClonalFrame which was previously described by Didelot and Falush (2007). The 
  recombination model underpinning ClonalFrameML is exactly the same as for 
  ClonalFrame, but this new implementation is a lot faster, is able to deal with 
  much larger genomic dataset, and does not suffer from MCMC convergence issues. 
  A scientific paper describing ClonalFrameML in detail has been published, see 
  Didelot X, Wilson DJ (2015) ClonalFrameML: Efficient Inference of Recombination 
  in Whole Bacterial Genomes. PLoS Comput Biol 11(2): e1004041. 
  doi:10.1371/journal.pcbi.1004041.
* fastp (version %(fastp)s): a tool designed to provide fast all-in-one preprocessing 
  for FastQ files. This tool is developed in C++ with multithreading supported 
  to afford high performance.
* FastTree (version %(FastTree)s: FastTree infers approximately-maximum-likelihood 
  phylogenetic trees from alignments of nucleotide  or protein sequences. 
  FastTree can handle alignments with up to a million of sequences in a reasonable 
  amount of time and memory.
* HTSlib (version %(HTSlib)s): HTSlib is an implementation of a unified C library for 
  accessing common file formats, such as SAM, CRAM and VCF, used for high-throughput 
  sequencing data, and is the core library used by samtools and bcftools. 
  HTSlib implements a generalized BAM index, with file extension .csi 
  (coordinate-sorted index). The HTSlib file reader first looks for the new index 
  and then for the old if the new index is absent.
  This project also includes the popular tabix indexer, which indexes both .tbi 
  and .csi formats, and the bgzip compression utility.
* BCFtools (version %(BCFtools)s): BCFtools is a program for variant calling and manipulating 
  files in the Variant Call Format (VCF) and its binary counterpart BCF. All commands 
  work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed. In 
  order to avoid tedious repetion, throughout this document we will use "VCF" and "BCF" 
  interchangeably, unless specifically noted.
  Most commands accept VCF, bgzipped VCF and BCF with filetype detected automatically 
  even when streaming from a pipe. Indexed VCF and BCF work in all situations. 
  Unindexed VCF and BCF and streams work in most, but not all situations. In general, 
  whenever multiple VCFs are read simultaneously, they must be indexed and therefore 
  also compressed.
* SAMtools (version %(SAMtools)s): SAMtools provide various utilities for manipulating 
  alignments in the SAMformat, including sorting, merging, indexing and generating 
  alignments in aper-position format.
  SAMtools is implemented as a couple of executables and a number of scripts.Some scripts 
  (in particular the LUA scripts) may require additional modules.
* MCL (version %(MCL)s): The MCL algorithm is short for the Markov Cluster 
  Algorithm, a fast and scalableunsupervised cluster algorithm for graphs 
  (also known as networks) based onsimulation of (stochastic) flow in graphs.
  The software is licensed under the GNU General Public License, version 3. It
  implies that the source code is available, and the license gives you the freedom
  to study the code and modify it in any way that you see fit. If you pass parts
  or all of the code, compiled parts of the code, or a derived product on to
  others, you have to make the code available to them on the same conditions.
  The authors do ask though to quote a number of publications when using the
  software, see https://micans.org/mcl/index.html?sec_license.
  The package consists of executables only, no libraries. Documentation is
  provided through man pages and the package homepage.
* MEGAHIT (version %(MEGAHIT)s): an ultra-fast and memory-efficient NGS assembler. It is
  optimized for metagenomes, but also works well on generic single genome assembly 
  (small or mammalian size) and single-cell assembly.
  The MEGAHIT executable is a Python script. It should run with the system
  Python on the UAntwerp systems. However, any of the other Python modules
  in the toolchain should also work.
* miniasm (version %(miniasm)s): a very fast OLC-based de novo assembler for noisy long 
  reads. It takes all-vs-all read self-mappings (typically by minimap) as input and 
  outputs an assembly graph in the GFA format. Different from mainstream assemblers, 
  miniasm does not have a consensus step. It simply concatenates pieces of read 
  sequences to generate the final unitig sequences. Thus the per-base error 
  rate is similar to the raw input reads.
  So far miniasm is in early development stage. It has only been tested on a dozen 
  of PacBio and Oxford Nanopore (ONT) bacterial data sets.
* minimap2 (version %(minimap2)s): a fast sequence mapping and alignment
  program that can find overlaps between long noisy reads, or map long
  reads or their assemblies to a reference genome optionally with detailed
  alignment (i.e. CIGAR). At present, it works efficiently with query
  sequences from a few kilobases to ~100 megabases in length at an error
  rate ~15%%. Minimap2 outputs in the PAF or the SAM format. On limited
  test data sets, minimap2 is over 20 times faster than most other
  long-read aligners. It will replace BWA-MEM for long reads and contig
  alignment.
  The module also includes the optional minimap2-lite and sdust commands.
  Specific processor support in Minimap2 is ancient. It only supports
  vectorization at the level of early 00's CPUs but no recent CPUs, and the
  code doesn't have much parallelism either, so consider switching to a more
  modern code.
* MUSCLE (version %(MUSCLE)s): MUSCLE is one of the best-performing multiple 
  alignment programs according to published benchmark tests, with accuracy and 
  speed that are consistently better than CLUSTALW. MUSCLE can align hundreds 
  of sequences in seconds. Most users learn everything they need to know about 
  MUSCLE in a few minutes—only a handful of command-line options are needed 
  to perform common alignment tasks.
* Racon (version %(Racon)s): s intended as a standalone consensus module to correct 
  raw contigs generated by rapid assembly methods which do not include a consensus 
  step. The goal of Racon is to generate genomic consensus which is of similar or 
  better quality compared to the output generated by assembly methods which 
  employ both error correction and consensus steps, while providing a speedup 
  of several times compared to those methods. It supports data produced by both 
  Pacific Biosciences and Oxford Nanopore Technologies.
  Racon can be used as a polishing tool after the assembly with either Illumina 
  data or data produced by third generation of sequencing. The type of data 
  inputed is automatically detected.
  This module is built without support for CUDA.
* VSEARCH (version %(VSEARCH)s): VSEARCH upports de novo and reference based 
  chimera detection, clustering, full-length and prefix dereplication, 
  rereplication, reverse complementation, masking, all-vs-all pairwise 
  global alignment, exact and global alignment searching, shuffling, 
  subsampling and sorting. It also supports FASTQ file analysis, filtering, 
  conversion and merging of paired-end reads.
  VSEARCH stands for vectorized search, as the tool takes advantage of 
  parallelism in the form of SIMD vectorization as well as multiple threads 
  to perform accurate alignments at high speed. VSEARCH uses an optimal global 
  aligner (full dynamic programming Needleman-Wunsch), in contrast to USEARCH 
  which by default uses a heuristic seed and extend aligner. This usually 
  results in more accurate alignments and overall improved sensitivity 
  (recall) with VSEARCH, especially for alignments with gaps.
  NOTE: Given that the compiler options that the code choses are those for
  essentially a 15-year old Pentium 4 processor, the code may not be that well
  vectorized despite what it suggests and may not exploit more modern vector
  instructions at all.
""" % local_version_subs

docurls = [
    'bedtools:      Web-based documentation on http://bedtools.readthedocs.io/',
    'CD-HIT:        Web-based documentation on https://github.com/weizhongli/cdhit/wiki',
    'ClonalFrameML: Web-based information on https://github.com/xavierdidelot/clonalframeml/wiki',    
    'fastpp:        Web-based documentation on https://github.com/OpenGene/fastp/blob/master/README.md',
    'FastTree:      Web-based documentation on http://www.microbesonline.org/fasttree/',
    'HTSlib:        Man pages in sections 1, 5 and 7',
    'BCFtools:      Web-based documentation on http://samtools.github.io/bcftools/howtos/index.html',
    'BCFtools:      Man page bcftools in section 1',
    'SAMtools:      Man page for the samtools and wgsim commands (section 1)',
    'MCL:           Man pages (sections 1, 5 and 7) - try \man mcl\ as a starting point',
    'MEGAHIT:       Web-based documentation on https://github.com/voutcn/megahit/blob/master/README.md',
    'MEGAHIT:       Command line help with `megahit -h`',
    'miniasm:       Web-based documentation on https://github.com/lh3/miniasm/blob/master/README.md',
    'minimap2:      Web-based documentation on https://github.com/lh3/minimap2/blob/master/README.md',
    'minimap2:      Man page for the minimap2 command', 
    'MUSCLE:        Web-based documentation on http://drive5.com/muscle/manual/',
    'Racon:         Web-based documentation on https://github.com/lbcb-sci/racon/blob/master/README.md',
    'VSEARCH:       Man page vsearch in section 1',
    'VSEARCH:       Manual downloadable from https://github.com/torognes/vsearch/releases/download/v%(version)s/vsearch_manual.pdf',
]

toolchain =     {'name': 'intel', 'version': local_buildset}

builddependencies = [
    ('buildtools', local_buildset,     '', True),
    ('Perl',       local_Perl_version),
]

dependencies = [
    ('baselibs', local_buildset,       '', ('GCCcore', local_gcc_version)), 
    ('LuaJIT',   local_LuaJIT_version, '', ('GCCcore', local_gcc_version))
]

default_easyblock = 'ConfigureMake'

components = [
    ('BEDTools', local_BEDTools_version, {
        'sources':      [ {
                            'filename':    'bedtools-%(version)s.tar.gz',
                            'source_urls': ['https://github.com/arq5x/bedtools2/releases/download/v%(version)s/']
                        } ],
        'start_dir':    'bedtools2',
        'skipsteps':    ['configure'],
        'prebuildopts': 'sed -e "s/-g -Wall -O2/-Wall/" -i Makefile && ',
        'buildopts':    'CXX="$CXX" CC="$CC" CFLAGS="$CFLAGS" VERBOSE=1',
        'installopts':  'prefix=%(installdir)s CXX="$CXX" VERBOSE=1',
    }),
    ('CD-HIT', local_CDHIT_version, {
        'easyblock':     'MakeCp',
        'sources':       [ {
                            'download_filename': 'V%(version)s.tar.gz',
                            'filename':          SOURCE_TAR_GZ,
                            'source_urls':       ['https://github.com/weizhongli/cdhit/archive/']
                         } ],
        'start_dir':     'cdhit-%(version)s',
        'prebuildopts':  'sed -i \'s@#!/usr/bin/perl.*@#!/usr/bin/env perl@\' *.pl && ',
        'buildopts':     'CC="$CXX" CCFLAGS="$CPPFLAGS $CXXFLAGS -qopenmp"', 
        'files_to_copy': [
                            (['cd-hit', 'cd-hit-est', 'cd-hit-2d', 'cd-hit-est-2d', 'cd-hit-div', 'cd-hit-454'], 'bin'), 
                            (['*.pl'],                  'bin'), 
                            (['doc/*'],                 'share/doc/CD-HIT'), 
                            (['README', 'license.txt'], 'share/doc/CD-HIT'),
                         ],
    }),
    ('ClonalFrameML', local_ClonalFrameML_version, {
        'easyblock':     'MakeCp',
        'sources':       [ {
                            'download_filename': 'v%(version)s.tar.gz',
                            'filename':          SOURCE_TAR_GZ,
                            'source_urls':       ['https://github.com/xavierdidelot/ClonalFrameML/archive/']
                         } ],
        'start_dir':     '%(name)s-%(version)s/src',
        'prebuildopts':  'sed -e "s|CC = .*|CC = \$(CXX)|" -e "s|CFLAGS +=.*|CFLAGS = \$(CXXFLAGS)|" -i makefile && ',
        'buildopts':     'all', 
        'files_to_copy': [
                            (['ClonalFrameML'],  'bin'), 
                            (['cfml_results.R'], 'bin'), 
                            (['../README.md'],   'share/doc/ClonalFrameML'),
                         ],
    }),
    ('fastp', local_fastp_version, {
        'sources':        [ {
                             'download_filename': 'v%(version)s.zip',
                             'filename':          SOURCELOWER_ZIP,
                             'source_urls':       ['https://github.com/OpenGene/fastp/archive/'],
                          } ],
        'start_dir':      '%(namelower)s-%(version)s',
        'skipsteps':      ['configure'],
        'buildopts':      'CXXFLAGS="${CXXFLAGS} -std=c++11 -I./inc"',
        'preinstallopts': 'mkdir -p %(installdir)s/bin && ',
        'installopts':    'PREFIX=%(installdir)s',
    }),
    ('FastTree', local_FastTree_version, {
        'easyblock':     'CmdCp',
        'sources':       [ {
                            'filename':          '%(name)s-%(version)s.c',
                            'source_urls':       ['http://www.microbesonline.org/fasttree/'],
                            'extract_cmd':       'mkdir %(name)s-%(version)s ; cp %s %(name)s-%(version)s'
                         } ],
        'start_dir':     '%(name)s-%(version)s',
        'skipsteps':     ['source'],
        'cmds_map':      [('FastTree.*.c', '$CC -DOPENMP $CFLAGS $LIBS %%(source)s -o %(name)s')],
        'files_to_copy': [
                            ((['FastTree'], 'bin')), 
                         ],
    }),
    ('MCL', local_MCL_version, {
        'sources':      [ {
                           'filename':    '%(namelower)s-%(version_major)s-%(version_minor)s.tar.gz',
                           'source_urls': ['http://micans.org/%(namelower)s/src/']
                        } ],
        'start_dir':    'mcl-%(version_major)s-%(version_minor)s',
        'installopts':  ' && cp %(builddir)s/mcl-%(version_major)s-%(version_minor)s/src/alien/oxygen/src/mclblastline %(installdir)s/bin ' + 
                        ' && cp %(builddir)s/mcl-%(version_major)s-%(version_minor)s/src/alien/oxygen/src/mcxdeblast   %(installdir)s/bin',
    }),
    ('MEGAHIT', local_MEGAHIT_version, {
        'easyblock':         'CMakeMake',
        'sources':           [ {
                                 'download_filename': 'v%(version)s.zip',
                                 'filename':          '%(namelower)s-%(version)s.zip',
                                 'source_urls':       ['https://github.com/voutcn/%(namelower)s/archive/'],
                             } ],
        'start_dir':         '%(namelower)s-%(version)s',
        'separate_build_dir': False,
    }),
    ('miniasm', local_miniasm_version, {
        'easyblock':     'MakeCp',
        'sources':       [ { # https://github.com/lh3/miniasm/archive/v0.3.tar.gz
                             'download_filename': 'v%(version)s.tar.gz',
                             'filename':          SOURCELOWER_TAR_GZ,
                             'source_urls':       ['https://github.com/lh3/miniasm/archive']
                         } ],
        'start_dir':     '%(namelower)s-%(version)s',
        'buildopts':     'CC="$CC" CFLAGS="$CFLAGS"',
        'files_to_copy': [
                            (['miniasm', 'minidot'],       'bin'),
                            (['LICENSE.txt', 'README.md'], 'share/doc/miniasm'),
                         ],
    }),
    ('minimap2', local_minimap2_version, {
        'easyblock':     'MakeCp',
        'sources':       [ { # https://github.com/lh3/minimap2/releases/download/v2.17/minimap2-2.17.tar.bz2
                            'filename':    '%(name)s-%(version)s.tar.bz2',
                            'source_urls': ['https://github.com/lh3/%(name)s/releases/download/v%(version)s/']
                         } ],
        'start_dir':     '%(namelower)s-%(version)s',
        'prebuildopts':  'sed -e "s/-msse2 //" -e "s/-msse4.1 //" -e "s/-mno-sse4.1 //" -i Makefile ; ' ,
        'buildopts':     'extra CFLAGS="$CFLAGS" ',
        'files_to_copy': [
                            (['minimap2', 'minimap2-lite', 'sdust'],  'bin'),
                            (['lib%(name)s.a'],                       'lib'),
                            (['*.h'],                                 'include'),
                            (['%(name)s.1'],                          'share/man/man1'),
                            (['LICENSE.txt', 'NEWS.md', 'README.md'], 'share/doc/minimap2'),
                         ],
    }),
    ('MUSCLE', local_MUSCLE_version, {
        'easyblock':     'MakeCp',
        'sources':       [ {
                            'filename':    '%(namelower)s%(version)s_src.tar.gz',
                            'source_urls': ['http://www.drive5.com/muscle/downloads%(version)s/']
                         } ],
        'patches':       ['MUSCLE-%(version)s_easyconfig_vars.patch'],
        'start_dir':     '%(namelower)s%(version)s/src',
        'files_to_copy': [(["muscle"], 'bin')],
    }),
    ('Racon', local_Racon_version, {
        'easyblock':         'CMakeMake',
        'sources':           [ {
                                'filename':    '%(namelower)s-v%(version)s.tar.gz',
                                'source_urls': ['https://github.com/lbcb-sci/racon/releases/download/%(version)s/']
                             } ],
        'start_dir':         '%(namelower)s-v%(version)s',
        'separate_build_dir': False,
    }),
    ('VSEARCH', local_VSEARCH_version, {
        'sources':       [ {
                            'download_filename': 'v%(version)s.tar.gz',
                            'filename':          SOURCELOWER_TAR_GZ,
                            'source_urls':       ['https://github.com/torognes/vsearch/archive']
                         } ],
        'start_dir':     '%(namelower)s-%(version)s',
        'preconfigopts': 'sed -i "s/AM_CXXFLAGS=-Wall.*/AM_CXXFLAGS=$EBVARCXXFLAGS/" src/Makefile.am && ' +
                         './autogen.sh && ',

        'configopts':    '--disable-pdfman',
    }),
    ('HTSlib', local_HTSlib_version, {
        'sources':      [ {
                           'filename':    SOURCELOWER_TAR_BZ2,
                           'source_urls': ['https://github.com/samtools/%(namelower)s/releases/download/%(version)s/']
                        } ],
        'start_dir':    '%(namelower)s-%(version)s',
        'configopts':   '--with-libdeflate --enable-libcurl --enable-s3',
    }),
    ('BCFtools', local_BCFtools_version, {
        'sources':      [ {
                           'filename':    SOURCELOWER_TAR_BZ2,
                           'source_urls': ['https://github.com/samtools/%(namelower)s/releases/download/%(version)s/']
                        } ],
        'start_dir':    '%(namelower)s-%(version)s',
        'configopts':   '--enable-libgsl --enable-perl-filters --with-htslib=%(installdir)s',
    }),
    ('SAMtools', local_SAMtools_version, {
        'easyblock':    'EB_SAMtools',
        'sources':      [ {
                           'filename':    SOURCELOWER_TAR_BZ2,
                           'source_urls': ['https://github.com/samtools/%(namelower)s/releases/download/%(version)s/']
                        } ],
        'start_dir':    '%(namelower)s-%(version)s',
        'configopts':   '--with-ncurses --with-htslib=%(installdir)s',
    }),
]

sanity_check_paths = {
    'files':    # BEDtools
                [ 'bin/%s' % x for x in ['bedtools', 'pairToBed', 'mergeBed', 'bedToBam', 'fastaFromBed'] ] +
                # minimap2
                [ 'bin/minimap2', 'bin/minimap2-lite', 'bin/sdust', 'lib/libminimap2.a' ] +
                # CD-HIT
                [ 'bin/%s' % x for x in ['cd-hit', 'cd-hit-est', 'cd-hit-2d', 'cd-hit-est-2d', 'cd-hit-div', 'cd-hit-454'] ] +
                # ClonalFrameML
                [ 'bin/ClonalFrameML', 'bin/cfml_results.R', 'share/doc/ClonalFrameML/README.md' ] +
                # fastp
                ['bin/fastp'] +
                # MCL
                [ 'bin/mcl' ] +
                # minimap2
                [ 'bin/minimap2', 'bin/minimap2-lite', 'bin/sdust', 'lib/libminimap2.a' ] +
                # Racon
                [ 'bin/racon' ] +
                # VSEARCH
                [ 'bin/vsearch' ] +
                # HTSlib
                [ 'bin/bgzip', 'bin/htsfile', 'bin/tabix', 'lib/libhts.%s' % SHLIB_EXT, 'lib/libhts.a' ] +
                # BCFtools
                [ 'bin/%s' % x for x in ['bcftools', 'plot-vcfstats', 'vcfutils.pl'] ] +
                # SAMtools
                [  'bin/samtools', 'lib/libbam.a' ],
    'dirs':  ['share/man']
}

moduleclass = 'bio'





