version=31Mar2017
toolchain=intel-2017a
installdir=/scratch/antwerpen/200/vsc20001/LAMMPS/${version}-${toolchain}

#
# Get the sources
#
pushd /apps/antwerpen/sources/l/LAMMPS
wget https://github.com/lammps/lammps/archive/stable_${version}.tar.gz
# Creates stable_${version}.tar.gz in that directory.
popd


#
# Start the installation.
#
module load intel/2017a
module load Voro++/0.4.6-intel-2017a
module load PLUMED/2.3.0-intel-2017a
module load libjpeg-turbo/1.5.1-intel-2017a
module load libpng/1.6.28-intel-2017a

#
# Re-create some essential parts of the EasyBuild environment.
#
export CC=icc
export CFLAGS="-O2 -funroll-loops -fPIC"
export MPICXX=mpiicpc
export CXX=icpc
export CXXFLAGS="-O2 -funroll-loops -fPIC"
export F90=ifort
export F90FLAGS="-O2 -funroll-loops -fPIC"


# Untar the package
tar -xf /apps/antwerpen/sources/l/LAMMPS/stable_${version}.tar.gz
# Creates the directory lammps-stable_${version}

cd lammps-stable_${version}

#
# First some regular patching. We've redesigned the patches so that they
# could work in a potential EasyConfig.
# The patch patches various Makefiles:
# - src/MAKE/Makefile.mpi with a specific configuration for UAntwerp.
# - src/MAKE/Makefile.serial with a specific configuration for UAntwerp.
# - lib/reax/Makefile.lammps.ifort
# - lib/voronoi/Makefile.lammps
patch -p1 </apps/antwerpen/sources/l/LAMMPS/LAMMPS-${version}_intel.patch

#
# PLUMED support is not integrated in LAMMPS, but the developers of PLUMED 
# offer a patching procedure to integrate it in a similar way as other
# the packages that LAMMPS offers by default.
# Note that officially only the 6Apr13 version of LAMMPS is supported!
#
$EBROOTPLUMED/lib/plumed/patches/patch.sh -e lammps-6Apr13 --shared -p

#
# Instal versious UAntwerp-specific extensions, in chronological order so 
# that we always keep the newest version. This adds a number of fix_* and
# pair_* files to the src directory.
#
/bin/cp -fp /apps/antwerpen/sources/l/LAMMPS/fix-1Feb14/* src
/bin/cp -fp /apps/antwerpen/sources/l/LAMMPS/fix-30Oct14/* src
/bin/cp -fp /apps/antwerpen/sources/l/LAMMPS/fix-14May16/* src
/bin/cp -fp /apps/antwerpen/sources/l/LAMMPS/fix-31Mar2017/* src

#
# Configure LAMMPS with the packages that will be used
# We turn on all packages, then turn off a selection that we do not want or
# that casue conflicts.
#
cd src
make yes-all yes-plumed
# Disable some libraries that we do not have
make no-kim no-poems no-meam no-kokkos no-user-atc no-user-awpmd no-user-quip no-user-h5md no-user-vtk
# Other features
make no-gpu no-user-omp no-user-intel no-opt no-user-qmmm no-user-smd no-mscg

#
# Build the software
#
cd ../lib/colvars ; make -j20 -f Makefile.g++ CXX=${CXX} CXXFLAGS="${CXXFLAGS}" 
cd ../reax        ; make -j20 -f Makefile.ifort F90FLAGS="${F90FLAGS}"
cd ../../src      ; make -j20 mpi CC=${MPICXX} CFLAGS="${CXXFLAGS}"
# Reconfigure for a serial build
make clean-all
make no-mpiio no-user-lb
make -j20 serial CC=${CXX} CFLAGS="${CXXFLAGS}"
# Try building some tools
cd ../tools ; ${CXX} -o binary2txt ${CXXFLAGS} binary2txt.cpp
              ${F90} -o chain ${F90FLAGS} chain.f
              ${F90} -o micelle2d ${F90FLAGS} micelle2d.f
cd colvars  ; ${CXX} -o abf_integrate ${CXXFLAGS} abf_integrate.cpp abf_data.cpp
cd ../reax  ; ${F90} -o bondConnectCheck ${F90FLAGS} bondConnectCheck.f90
              ${CC} -o mol_fra ${CFLAGS} mol_fra.c

#
# And now the copy phase
#
cd ../..
mkdir -p ${installdir}/bin
cp LICENSE ${installdir}
cp src/lmp_mpi src/lmp_serial ${installdir}/bin
cp -r examples ${installdir}
cp -r doc ${installdir}
cp tools/binary2txt tools/chain tools/micelle2d tools/colvars/abf_integrate tools/reax/bondConnectCheck tools/reax/mol_fra tools/reax/reaxc_bond.pl ${installdir}/bin
mkdir -p ${installdir}/tools
cp -r tools/matlab tools/python tools/emacs tools/vim ${installdir}/tools

#
# And finally build a module file...
#
