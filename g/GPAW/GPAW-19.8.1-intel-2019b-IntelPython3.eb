easyblock = 'Bundle'

local_ASE_version =       '3.18.1'
local_GPAW_version =      '19.8.1'
local_GPAWsetup_version = '0.9.20000' # Check version on https://wiki.fysik.dtu.dk/gpaw/setups/setups.html

name =          'GPAW'
version =       local_GPAW_version
versionsuffix = '-IntelPython3'

local_buildset =         '2019b'
local_python_version =   '3.6.9'
local_gcc_version =      '8.3.0'
local_binutils_version = '2.32'

local_pyshortversion = '.'.join(local_python_version.split('.')[:-1])

homepage = 'http://wiki.fysik.dtu.dk/gpaw'

whatis = [
    "Description: GPAW: DFT and beyond within the projector-augmented wave method.",
    'This module also includes the compatible ASE version ' + local_ASE_version,
]

description = """
GPAW is a density-functional theory (DFT) Python code based on the
projector-augmented wave (PAW) method and the atomic simulation environment
(ASE). It uses plane-waves, atom-centered basis-functions or real-space
uniform grids combined with multigrid methods.

This module also includes a matching version of ASE (version %(ASE_version)s),
the Atomic Simulation Environment, which is used internally by GPAW.

The module also contains the Atomic PAW setup files (version %(GPAWsetup_version)s)
in the directory $GPAW_SETUP_FILES.

The GPAW manual advises the OMP_NUM_THREADS should be set to 1 so we do this
in the module.

This version uses the Intel Python distribution which uses a different version
of NumPy with better alignment of data structures and therefore better 
NumPy performance in some applications.
The version in this module is compiled using the regular FFTW libraries.
The optional libvdwxc support is included in this module.
The optional ELPA support is included in this module.
""" % {
    'ASE_version':       local_ASE_version,  
    'GPAWsetup_version': local_GPAWsetup_version,  
}

docurls = [
    'GPAW web-based documentation: https://wiki.fysik.dtu.dk/gpaw/',
    'ASE web-based documentation:https://wiki.fysik.dtu.dk/ase/',
]

toolchain =     {'name': 'intel', 'version': local_buildset}
toolchainopts = {'pic': True}

dependencies = [
    ('Python',   '3.7.4'),
    ('FFTW',     '3.3.8'),
    ('libxc',    '4.3.4'),
    ('libvdwxc', '0.4.0',           '-MPI'),
    ('ELPA',     '2019.05.002'),
    ('ASE',      local_ASE_version, '-Python-%(pyver)s'),
]

default_easyblock = 'ConfigureMake'

components = [
    ( 'GPAW-setups', local_GPAWsetup_version, { 
        # Check version on https://wiki.fysik.dtu.dk/gpaw/setups/setups.html
        'easyblock': 'Tarball',
        'sources':   [{
                        'filename':    SOURCELOWER_TAR_GZ,
                        'source_urls': ['https://wiki.fysik.dtu.dk/gpaw-files/'], 
                        'extract_cmd': 'mkdir -p share/gpaw-setups ; cd share/gpaw-setups ; tar -xf %s --strip-components=1',
                     }]  
    }),
    ( 'dummy', 'dummy', {
        'sources':   [{
                       'filename':    'GPAW-' + local_GPAW_version + '-eb_customize_intel_FFTW.py',
                       'extract_cmd': 'cp %s ./GPAW_eb_customize.py'  
                     }],
        'skipsteps': ['configure', 'build', 'install'],
    })
]

# This is a bundle of Python packages
exts_defaultclass = 'PythonPackage'

exts_list = [
    # ASE and its dependencies
    ('Werkzeug', '0.16.0', {
        'modulename':     'werkzeug',
        'source_urls':    ['https://pypi.python.org/packages/source/W/Werkzeug'],
#        'install_target': 'easy_install',
#        'zipped_egg':     True,
    }),
    ('MarkupSafe', '1.1.1', { # Includes binaries!
        'modulename':  'markupsafe',
        'source_urls': ['https://pypi.python.org/packages/source/M/MarkupSafe'],
        'check_ldshared': True, # Needed for a GCC-based Python with Intel-based extensions.
    }),
    ('Jinja2', '2.10.3', { # Contains only .py files so probably safe as zipped egg?
        'modulename':  'jinja2',
        'source_urls': ['https://pypi.python.org/packages/source/J/Jinja2'],
    }),
    ('itsdangerous', '1.1.0', { # Installs as a zipped egg by itself.
        'source_urls': ['https://pypi.python.org/packages/source/i/itsdangerous'],
    }),
#    ('Click', '7.0', { # Included in the Python 3.7.4 extension list.
#        'modulename':  'click',
#        'source_urls': ['https://pypi.python.org/packages/source/c/click'],
#    }),
    ('Flask', '1.1.1', {
        'modulename':  'flask',
        'source_urls': ['https://pypi.python.org/packages/source/F/Flask'],
    }),
    ('ase', local_ASE_version, {
        'source_urls': ['https://pypi.python.org/packages/source/a/ase'],
    }),
    # GPAW and its dependencies
    ('gpaw', version, { # Includes binaries!
        'source_urls':    PYPI_LOWER_SOURCE,
        'use_pip':        False,
        'check_ldshared': True, # Needed for a GCC-based Python with Intel-based extensions.
        'buildcmd':       'build   --customize=../../GPAW_eb_customize.py --remove-default-flags',
        'buildopts':      ' && echo -e "\\nGPAW configuration log:\\n" && cat configuration.log && cp configuration.log ../../GPAW_configuration.log',
        'install_target': 'install --customize=../../GPAW_eb_customize.py --remove-default-flags',
    }),
]

postinstallcmds = [ # It turns out this runs in the build dir of the last extension.
    'mkdir -p %(installdir)s/easybuild', # The directory is not yet created by EasyBuild when this executes.
    'cp ../../GPAW_eb_customize.py   %(installdir)s/easybuild/GPAW-' + local_GPAW_version +'-eb_customize_intel_FFTW.py',
    'cp ../../GPAW_configuration.log %(installdir)s/easybuild',
]

# specify that Bundle easyblock should run a full sanity check, rather than just trying to load the module
full_sanity_check = True

sanity_check_paths = {
    'files': ['bin/gpaw%s' % x for x in ['', '-analyse-basis', '-basis', '-mpisim', '-plot-parallel-timings',
                                         '-python', '-runscript', '-setup', '-upfplot']],
    'dirs':  ['lib/python%(pyshortver)s/site-packages/%(namelower)s']
}

# make sure Tkinter is available, otherwise 'ase gui' will not work
sanity_check_commands = ["python -c 'import tkinter' "]

# As the main EasyBlock is "Bundle" PYTHONPATH will not be set automatically
modextrapaths = {
    'PYTHONPATH':      ['lib/python%(pyshortver)s/site-packages'],
}

modextravars = {
    'GPAW_SETUP_PATH': '%(installdir)s/share/gpaw-setups', # We don't use modextrapaths as the path should be  
                                                           # comma-separated rather than colon-separated anyway.
    'OMP_NUM_THREADS': '1',
}

moduleclass = 'chem'
