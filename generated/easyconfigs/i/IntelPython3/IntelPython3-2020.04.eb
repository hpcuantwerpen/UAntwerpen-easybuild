easyblock = 'Bundle'

name =    'IntelPython3'
version = '2020.04'

local_python_version = '3.7.7'
local_intel_root     = '/apps/antwerpen/x86_64/centos8/intel-psxe/2020.02'

local_buildset       = ''.join(version.split('.')[:1])
local_py_major       = local_python_version[0]
local_py_major_minor = '.'.join(local_python_version.split('.')[:2])

homepage = 'https://software.intel.com/en-us/distribution-for-python'

whatis = [
    'Description: Python '+ local_py_major_minor + ' from the Intel® Distribution for Python, powered by Anaconda.',
]

description = """
Python %(pyver)s from the Intel® Distribution for Python, powered by Anaconda.

A number of the packages in this distribution have been optimized by and for
Intel-compatible CPUs and may perform better than the regular versions of it.
In some cases, different algorithms with a different rounding pattern and
stability properties were used, so the results may be different from a regular
Python distribution.

Our license with Intel at UAntwerp does include support. This does not mean
that Intel will solve bugs in your code, but it does mean that if we find a 
bug and can reproduce it in a small script, Intel will have a look at it
and try to correct it in future versions.
""" % {
    'pyver': local_python_version
}

toolchain = SYSTEM

dependencies = [
#    ('intel',  tcver), # Not really needed as all libraries are included through symbolic links
]

allow_prepend_abs_path = True

modextrapaths = {
    'CONDA_PREFIX':    local_intel_root + '/intelpython%s'     % local_py_major,
    'PATH':            local_intel_root + '/intelpython%s/bin' % local_py_major,
    'LD_LIBRARY_PATH': local_intel_root + '/intelpython%s/lib' % local_py_major,
}

# The extra EB-vars are needed for compatibility with the regular EasyBuild
# Python packages and the installation procedures for additional packages.
modextravars = {
    'EBROOTPYTHON':      local_intel_root + '/intelpython%s'     % local_py_major,
    'EBVERSIONPYTHON':   local_python_version,
    'PYTHONHOME':        local_intel_root + '/intelpython%s'     % local_py_major,
    'CONDA_DEFAULT_ENV': 'root',
}

moduleclass = 'lang'

modluafooter= """
family("python%(pymm)s")
""" % { 'pymm': local_py_major_minor }
