easyblock = 'MakeCp'

name = 'LAMMPS'
version = '11Aug2017'

homepage = 'http://lammps.sandia.gov/'

whatis = [
    "Description: LAMMPS is a classical molecular dynamics code, and an acronym for Large-scale Atomic/Molecular Massively Parallel Simulator",
    "The module contains a MPI binary (lmp_mpi) and serial binary (lmp_serial) with UA customizations, and some of the tools",
]

description = """
LAMMPS is a classical molecular dynamics code, and an acronym for Large-scale
Atomic/Molecular Massively Parallel Simulator.

The module contains a MPI binary (lmp_mpi) and serial binary (lmp_serial) with
UA customizations, and some of the tools. It is compiled without the optional
PLUMED support as the patch provided by PLUMED does not compile correctly
anymore.
"""

toolchain = {'name': 'intel', 'version': '2017a'}
toolchainopts = {'pic': True, 'openmp': False, 'usempi': False}

source_urls = ['https://github.com/lammps/lammps/archive/']
sources = [
    'stable_%(version)s.tar.gz',
]
patches = [ 
    ('%(name)s_UAextensions_%(version)s.patch',1),
    ('%(name)s_EasyBuild_%(version)s.patch',1),
    ('%(name)s_sources_%(version)s.patch',1),
]

dependencies = [
    ('Voro++',        '0.4.6'),
#    ('PLUMED',        '2.3.0'),
    ('libjpeg-turbo', '1.5.1'),
    ('libpng',        '1.6.28'),
]

osdependencies = [
    ('python-devel'),
]

buildcmds  = 'parallel=$(nproc) && '
# Note that we use && rather then ; to separate commands so that the build fails
# if one of the commands fails.
# Configure phase of the build
#buildcmds += '$EBROOTPLUMED/lib/plumed/patches/patch.sh -e lammps-6Apr13 --shared -p ; '
buildcmds += 'cd src ; make yes-all no-kim no-poems no-meam no-kokkos no-user-atc no-user-awpmd no-user-quip no-user-h5md no-user-vtk no-gpu no-user-omp no-user-intel no-opt no-user-qmmm no-user-smd no-mscg ; '
# Build phase: First build the libraries, then MPI and serial versions of LAMMPS.
buildcmds += 'pushd ../lib/colvars && make -j${parallel} -f Makefile.EasyBuild && popd && '
buildcmds += 'pushd ../lib/reax    && make -j${parallel} -f Makefile.EasyBuild && popd && '
buildcmds += 'pushd ../lib/voronoi && make -j${parallel} -f Makefile.EasyBuild && popd && '
buildcmds += 'make -j${parallel} mpi CC=${MPICXX} LINKFLAGS="-O" LIB="-lstdc++ -mkl=cluster" LMP_INC="-DLAMMPS_GZIP -DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_MEMALIGN=64" FFT_INC="-DFFT_MKL" FFT_PATH="" FFT_LIB="" JPG_LIB="-ljpeg -lpng" reax_SYSINC="" reax_SYSLIB="-lifcore -lsvml -limf" reax_SYSPATH="-L${MKLROOT}/../compiler/lib/intel64_lin" && '
buildcmds += 'make clean-all && make no-mpiio no-user-lb && '
buildcmds += 'make -j${parallel} serial CC=${CC} LINKFLAGS="-O" LIB="-lstdc++ -mkl=sequential" LMP_INC="-DLAMMPS_GZIP -DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_MEMALIGN=64" FFT_INC="-DFFT_MKL" FFT_PATH="" FFT_LIB="" JPG_LIB="-ljpeg -lpng" reax_SYSINC="" reax_SYSLIB="-lifcore -lsvml -limf" reax_SYSPATH="-L${MKLROOT}/../compiler/lib/intel64_lin" && '
# Next build some tools.
buildcmds += 'cd .. && '
buildcmds += 'pushd tools         && ${CXX} -o binary2txt ${CXXFLAGS} binary2txt.cpp                    && popd && '
buildcmds += 'pushd tools         && ${F90} -o chain ${F90FLAGS} chain.f                                && popd && '
buildcmds += 'pushd tools         && ${F90} -o micelle2d ${F90FLAGS} micelle2d.f                        && popd && '
buildcmds += 'pushd tools/colvars && ${CXX} -o abf_integrate ${CXXFLAGS} abf_integrate.cpp abf_data.cpp && popd && '
buildcmds += 'pushd tools/reax    && ${F90} -o bondConnectCheck ${F90FLAGS} bondConnectCheck.f90        && popd && '
buildcmds += 'pushd tools/reax    && ${CC}  -o mol_fra ${CFLAGS} mol_fra.c                              && popd && '
buildcmds += 'cd src && '
prebuildopts  = buildcmds
buildopts  = 'clean-all '

#
# Files to copy:
# - the LICENSE file
# - src/lmp_mpi and src/lmp_serial to the bin directory
# - The doc directory
# - The examples directory
# - A selection of tools goes into the bin directory
# - tools/matlab, tools/python, tools/emacs, tools/vim are copied to the tools subdirectory.
#
files_to_copy = [
    "LICENSE",
    (["src/lmp_mpi", "src/lmp_serial"], "bin"),
    "examples",
    (["tools/binary2txt", "tools/chain", "tools/micelle2d", "tools/colvars/abf_integrate", "tools/reax/bondConnectCheck", "tools/reax/mol_fra", "tools/reax/reaxc_bond.pl"], "bin"),
    (["tools/matlab", "tools/python", "tools/emacs", "tools/vim"], "tools") 
]

sanity_check_paths = {
    'files' : ["LICENSE", "bin/lmp_mpi", "bin/lmp_serial", 
               "bin/binary2txt", "bin/chain", "bin/micelle2d", "bin/abf_integrate", "bin/bondConnectCheck", "bin/mol_fra"],
    'dirs'  : ["examples", "tools/matlab", "tools/python", "tools/emacs", "tools/vim"]
}

moduleclass = 'math'

