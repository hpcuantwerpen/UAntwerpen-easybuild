# EasyConfig for Faiss 1.5.0, developed by Kurt Lust @ UAntwerp
#
# As the configure utility included with Faiss doesn't work the way it should
# when using the Intel compilers, we've gone for one of the other options:
# Adapt one of the example makefile.inc files rather than using a version
# generated by a configuration utility. 
# So far we don't make optimal use of information passed by EasyBuild
# (e.g., the names of the compiler are hardcoded in this script) as it would
# likely require changes anyway for other compilers than the Intel ones. 
# Also, rather than using a patch file we copy an example makefile.inc and
# edit it with sed, hoping that this may carry over easier to other versions
# and also showing all changes and settings that are needed in a single
# file (this file).
#
easyblock = 'ConfigureMake'

name = 'Faiss'
version = '1.5.0'
versionsuffix = '-Python-%(pyver)s-CPU'

homepage = 'https://github.com/facebookresearch/faiss/'
whatis = [
    'Description: Faiss is a library for efficient similarity search and clustering of dense vectors',
    'This module provides the CPU-only libraries (static and shared) and a Python interface',
]

description = """
Faiss is a library for efficient similarity search and clustering of dense
vectors. It contains algorithms that search in sets of vectors of any size,
up to ones that possibly do not fit in RAM. It also contains supporting
code for evaluation and parameter tuning.

Faiss is written in C++ with complete wrappers for Python/numpy.  It is
developed by Facebook AI Research.

This module contains the CPU version only and no GPU-accelerated routines.
It is meant for use on the regular CPU nodes of the cluster.
"""

usage = """
Note that the code uses OpenMP, also through the MKL interfaces so whether using
it as a library or from Python it is advisded to specify the number of threads
through the OMP_NUM_THREADS environment variable.
"""

docurls = [
    'Documentation Wiki: https://github.com/facebookresearch/faiss/wiki',
]

toolchain = {'name': 'intel', 'version': '2018b'}
#toolchainopts = {'pic': True}

#% https://github.com/facebookresearch/faiss/archive/v1.5.0.tar.gz
source_urls = ['https://github.com/facebookresearch/faiss/archive/']
sources = ['v%(version)s.tar.gz']

dependencies = [
    ('Python', '3.7.1'),
]

builddependencies = [
    ('SWIG',   '3.0.12', '-Python-%(pyver)s'),
]

# Since the configure utility is immature in version 1.5, in particular when 
# not using the GNU compilers, we manually edit a suitable makefile.inc
# before building.
skipsteps = ['configure']

# Note the very problematic PYTHONCFLAGS line... We need to find something
# better than that to set these as the numpy version is also hardcoded into it.
prebuildopts  = ''
prebuildopts += '/bin/cp example_makefiles/makefile.inc.Linux makefile.inc && '
prebuildopts += 'export PYTHONCFLAGS="-I$(python -c "import distutils.sysconfig; print(distutils.sysconfig.get_python_inc())") -I$(python -c "import numpy ; print(numpy.get_include())")" && '
prebuildopts += 'sed --in-place=.orig '
prebuildopts += '  -e \'s/^CXX .*/CXX      = icpc -std=c++11/\' '
prebuildopts += '  -e \'s/^CXXFLAGS.*/CXXFLAGS = -fPIC -m64 -Wall -g -O3 -qopenmp -Wno-sign-compare/\' '
prebuildopts += '  -e \'s/CPUFLAGS =.*/CPUFLAGS = -xHost/\' '
prebuildopts += '  -e \'s/^LDFLAGS  = -fPIC -fopenmp/LDFLAGS  = -fPIC -qopenmp/\' '
prebuildopts += '  -e \'s/.*LDFLAGS.*MKLROOT.*/LDFLAGS += -L$\(MKLROOT\)\/lib\/intel64_lin/\' '
# The following line is OK when the Python interfaces are not needed. However, due
# to the way the shared library mechanism works and sincd the Faiss Python 
# interfaces do not explicitly support MKL the way numpy does, one gets error
# messages similar to:
# Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.
# when linking this way.
#prebuildopts += '  -e \'s/.*LIBS.*mkl_intel_ilp64.*/LIBS   += -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl/\' '
# The solution for the Python interfaces is to use either one of the next two lines:
# - Already include libmks_avx2 etc when linking, and it does not really harm to
#   overspecify
prebuildopts += '  -e \'s/.*LIBS.*mkl_intel_ilp64.*/LIBS   += -lmkl_intel_ilp64 -lmkl_intel_thread -lmkl_core -lmkl_avx -lmkl_avx2 -lmkl_avx512 -lmkl_def -liomp5 -lpthread -lm -ldl/\' '
# - Or use the "everything in one" libmkl_rt library.
#prebuildopts += '  -e \'s/.*LIBS.*mkl_intel_ilp64.*/LIBS   += -lmkl_rt -lpthread -lm -ldl/\' '
prebuildopts += '  -e \'s/.*CPPFLAGS += -DFINTEGER=long/CPPFLAGS += -DFINTEGER=long/\' '
prebuildopts += '  -e \'s/^CPPFLAGS += -DFINTEGER=int/# CPPFLAGS += -DFINTEGER=int/\' '
prebuildopts += '  -e \'s/^LIBS     += -lopenblas -llapack/# LIBS     += -lopenblas -llapack/\' '
prebuildopts += '  -e \'s/^PYTHONCFLAGS .*/#PYTHONCFLAGS = \(pass through environment\!\)/\' '
prebuildopts += '  -e \'s/^PYTHON .*/PYTHON       = $\(EBROOTPYTHON\)\/bin\/python/\' '
prebuildopts += '  makefile.inc && '

buildopts = 'all && cd python && make cpu build'

preinstallopts  = 'export PYTHONPATH=%(installdir)s/lib/python%(pyshortver)s/site-packages && '
preinstallopts += 'mkdir -p %(installdir)s/lib/python%(pyshortver)s/site-packages && '

installopts = 'prefix=%(installdir)s && cd python && python setup.py install --prefix=%(installdir)s'

sanity_check_paths = {
    'files': [ 'bin/f2py', 'include/faiss/FaissAssert.h', 
               'lib/libfaiss.a', 'lib/libfaiss.%s' % SHLIB_EXT],
    'dirs': ['bin', 'include/faiss', 'lib', 'lib/python%(pyshortver)s/site-packages'],
}

modextrapaths = {'PYTHONPATH': 'lib/python%(pyshortver)s/site-packages'}
moduleclass = 'lib'

