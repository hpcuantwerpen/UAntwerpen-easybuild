# Note that GLib is really made to be compiled with GCC and nothing else
# due to the use of compiler-specific pragma, so you may get warnings 
# about unrecognizded pragmas when compiling with another compiler.
easyblock = 'MesonNinja'

name =    'GLib'
version = '2.64.1'

local_buildset         = '2020a'
local_gcc_version      = '9.3.0'
local_binutils_version = '2.34'

homepage = 'http://www.gtk.org/'

whatis = [
    'Description: One of the GTK+ base libraries',
    'The module provides a number of command line utilities and static and shared libraries',
]

description = """
GLib provides the core application building blocks for libraries and
applications written in C. It provides the core object system used in GNOME,
the main loop implementation, and a large set of utility functions for strings
and common data structures.

The module provides a number of command line utilities and staqtic and shared
libraries.
"""

docurls= [
    'Web-based documentation: https://developer.gnome.org/glib/',
]

docpaths = [
    'share/gtk-doc/html/glib',
    'share/gtk-doc/html/gobject',
    'share/gtk-doc/html/gio'
]

toolchain     = {'name': 'GCCcore', 'version': local_gcc_version}
toolchainopts = {'pic': True}

# Check on https://ftp.gnome.org/pub/GNOME/sources/glib/
source_urls = [FTPGNOME_SOURCE]
sources =     [SOURCELOWER_TAR_XZ]

dependencies = [
    ('baselibs', local_buildset), # for libffi, gettext, libxml2, PCRE, util-linux
]

builddependencies = [
    # Python is required for building against GLib, at least when
    # gdbus-codegen or one of the other python scripts are used.
    # Since Meson 0.50 and later are Python >=3.5 only we can't build
    # Python specific versions of GLib that uses Python 2.x
    # thus Python should not be a runtime dependency for GLib.
    # Packages that use GLib should either have an explicit
    # (build)dependency on Python or it will use the system version
    # EasyBuild itself uses.
    ('buildtools', local_buildset, '',              True), # for pkg-config, Meson and Ninja
    ('binutils',   local_binutils_version)
]

# avoid using hardcoded path to Python binary in build step
preconfigopts = "export PYTHON=python && "

configopts  = "--buildtype=release --default-library=both "
configopts += "-Diconv=external "

#parallel = 1 # For debugging

postinstallcmds = ["sed -i -e 's|#!.*python[0-9.]*$|#!/usr/bin/env python|' %(installdir)s/bin/*"]

sanity_check_paths = {
    'files': ['lib/libglib-%(version_major)s.0.a', 'lib/libglib-%%(version_major)s.0.%s' % SHLIB_EXT],
    'dirs': ['bin', 'include'],
}

moduleclass = 'vis'
