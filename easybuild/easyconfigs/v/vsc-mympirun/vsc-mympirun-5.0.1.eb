easyblock = 'PythonBundle'

name =    'vsc-mympirun'
version = '5.0.1'

homepage = 'https://github.com/hpcugent/vsc-mympirun'

whatis = [
    "Description: A substitute for mpirun with some advantages in certain scenarios",
]

description = """
The module contains a replacement for the mpirun command that offers some
advantages, e.g., job scripts that can be made more portable between different
MPI implementations or easier starting of hybrid applications.

The code is developed by HPC-UGent. It is not clear however to what extent
it works well with the new Torque NUMA resource syntax (the -L instead of -l)
in all corner cases that can occur. We advise users who want to start hybrid
applications with the Torque NUMA-aware resource syntax favoured on the
UAntwerp clusters to have a look at the torque-tools module instead and in 
particular the torque-ost-per-line command in that module (which contains
man pages).

Run mympirun --help for more information on the mympirun command. There 
are also some instructions on the home page of the package.
"""


# we build this to work with every python version
toolchain = SYSTEM

allow_system_deps = [('Python', SYS_PYTHON_VERSION)]

use_pip = False

exts_default_options = {
    'download_dep_fail': True,
    'sanity_pip_check':  False,
    'source_urls':       [PYPI_SOURCE],
    'use_pip':           False,
}

exts_list = [
    ('setuptools', '44.1.0', {
        'source_tmpl': '%(name)s-%(version)s.zip',
#        'source_urls': ['https://pypi.python.org/packages/source/s/setuptools/'],
        'checksums':   ['794a96b0c1dc6f182c36b72ab70d7e90f1d59f7a132e6919bb37b4fd4d424aca'],
    }),
    ('future', '0.18.2', {
#        'source_urls': ['https://pypi.python.org/packages/source/f/future'],
        'checksums':   ['b1bead90b70cf6ec3f0710ae53a525360fa360d306a86583adc6bf83a4db537d'],
    }),
    ('pbr', '5.4.5', {
#        'source_urls': ['https://pypi.python.org/packages/source/p/pbr/'],
        'checksums':   ['07f558fece33b05caf857474a366dfcc00562bca13dd8b47b2b3e22d9f9bf55c'],
    }),
    ('funcsigs', '1.0.2', {
#        'source_urls': ['https://pypi.python.org/packages/source/f/funcsigs/'],
        'checksums':   ['a7bb0f2cf3a3fd1ab2732cb49eba4252c2af4240442415b4abce3b87022a8f50'],
    }),
    ('six', '1.14.0', {
        'checksums':   ['236bdbdce46e6e6a3d61a337c0f8b763ca1e8717c03b369e87a7ec7ce1319c0a'],
    }),
    ('mock', '3.0.5', {
#        'source_urls': ['https://pypi.python.org/packages/source/m/mock/'],
        'checksums':   ['83657d894c90d5681d62155c82bda9c1187827525880eda8ff5df4ec813437c3'],
    }),
    ('IPy', '1.00', {
        'modulename':  'IPy',
#        'source_urls': ['https://pypi.python.org/packages/source/i/IPy'],
        'checksums':   ['2f2bf658a858d43868d8a4352b3889cf78c66e2ce678b300dcf518c9149ba621'],
    }),
    ('vsc-install', '0.15.5', {
        'modulename':  'vsc.install',
#        'source_urls': ['https://pypi.python.org/packages/source/v/vsc-install'],
        'checksums':   ['f9774fe067c51283be18af90b6279f2e206b0472b213369920dc6b8603a9d3b9'],
    }),
    ('vsc-base', '3.1.3', {
        'modulename':  'vsc.utils',
#        'source_urls': ['https://pypi.python.org/packages/source/v/vsc-base'],
        'checksums':   ['44afe016d72c3cc0fd6fadeea891ce30373de5bf14a4eb5200ddaae54c193f51'],
    }),
    (name, version, {
        # don't check for import of vsc.mympirun, since that may fail if vsc-base is picked up from the OS
        'modulename':  'vsc',
#        'source_urls': ['https://pypi.python.org/packages/source/v/vsc-mympirun'],
        'checksums':   ['bd8c31831ca3991a406a698cc11ab0d5dde330e099202f0a7c41fd9ab97c9c4f'],
    }),
]

# we ship something in bin/fake
modextrapaths = {'PATH': 'bin/fake'}

sanity_check_paths = {
    'files': ['bin/mympirun', 'bin/mympisanity'],
    'dirs': ['bin/fake'],
}
sanity_check_commands = ["mympirun --help"]

moduleclass = 'tools'
