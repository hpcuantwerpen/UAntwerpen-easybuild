# UAntwerp-developed EasyConfig for QuantumESPRESSO, respecting the original
# configuration process as much as possible (except for the compiler options)
# and using a simple ConfigureMake process rather then the EasyBuild block
# for QE. The latter overwrites more settings than needed in the make.inc file
# generated by configure to impose its own ideas about how QE should be 
# configured.
easyblock = 'ConfigureMake'

name = 'QuantumESPRESSO'
version = '6.3'
versionsuffix = '-hybrid-UArecipe-Environ'

wannier90_version = '2.1.0'
environ_version = '1.1'

homepage = 'https://www.quantum-espresso.org/'
whatis = [
    "Description: Quantum ESPRESSO, an integrated suite for electronic-structure calculations based on DFT, plane waves and pseudopotentials",
    "This module contains hybrid OpenMP/MPI executables.",
    "Installed plugins: Wannier90 (2.1.0), QE-GIPAW (6.3), Environ (1.1)",
]

description = """
Quantum ESPRESSO %(version)s is an integrated suite of computer codes for
electronic-structure calculations and materials modeling at the nanoscale.  It
is based on density-functional theory, plane waves, and pseudopotentials (both
norm-conserving and ultrasoft).

This module contains hybrid openMP/MPI executables, so you'll need to set
OPENMP_NUM_THREADS to the appropriate value. See chapter 3 of the user guide
for information on parallelism in QuantumESPRESSO.

Installed plugins:
* qe-gipaw %(version)s
* wannier90 %(wv)s
* Environ %(ev)s

Other plugins supported in some of the other QuantumESPRESSO modules are 
supported by this module:
* No clear word on the compatibility of WanT with QE 6.3. The main web page is
  out of date with the version number and the release notes on the new 
  development site give zero information. Since the plugin does not compile
  without errors it has not been included.
* West (www.west-code.org) did not yet support QE 6.3 when this installation
  was done (West 3.1.1 was the newest version at that time).
* According to some sources, Yambo should be compatible. However, it does not
  compile without errors so has not been included.
""" % { 'version': version, 'wv': wannier90_version, 'ev': environ_version }

toolchain = {'name': 'intel', 'version': '2018b'}
toolchainopts = {'usempi': True, 'openmp': True}
# But do not forget to set compatible --en/disable-parallel and --en/disable-openmp arguments to configure!

# A major part of this list was determined from espresso/install/plugins_list
# Rather than moving the tar files into the archive subdirectory where QE unpacks
# them, we follow the approach from the EasyBlock: Uncompress in the standard
# easybuild location and then we put symbolic links in the places where QE
# expects the uncompressed sources. In this way, we can patch the plugins using
# the standard EasyBuild mechanisms.
sources = [
    { 'filename':    'qe-%(version)s.tar.gz',
      'source_urls': ['https://github.com/QEF/q-e/releases/download/qe-%(version)s/'] },
    # QE-GIPAW plugin
    { 'filename':          'qe-gipaw-%(version)s.tar.gz', 
      'download_filename': '%(version)s.tar.gz',
      'source_urls':        ['https://github.com/dceresoli/qe-gipaw/archive/'],
      'extract_cmd':        'tar -xf %s  ; /bin/ln -s %(builddir)s/qe-gipaw-%(version)s qe-%(version)s/qe-gipaw-%(version)s' },
    # Wannier  archive directory, but presumably done in the EasyBlock?
    { 'filename':    'wannier90-%(wv)s.tar.gz' % {'wv': wannier90_version}, 
      'source_urls': ['http://www.wannier.org/code/'],
      'extract_cmd': 'tar -xf %s ; /bin/ln -s %(builddir)s/wannier90-' + wannier90_version + ' qe-%(version)s/wannier90-' + wannier90_version },
]
#source_urls = [ ]

patches = [
    '%(name)s-%(version)s_drop_LIBS_before_configure_of_fox.patch'
]

# source checksums with shasum -a 256 
checksums = [
    '5d15f7cbb30ccb2e2e6722bc1cdf10a3aae909ae786654b0990068ed1846ad65',  # qe-6.3.tar.gz
    '090edfcc186047a12c596ec13fdb29c187ab33d91a44c08371f23e779bb15f1e',  # qe-gipaw-6.3.tar.gz
    'ee90108d4bc4aa6a1cf16d72abebcb3087cf6c1007d22dda269eb7e7076bddca',  # wannier90-2.1.0.tar.gz
    # QuantumESPRESSO-6.3_drop_LIBS_before_configure_of_fox.patch
    '714fef8be920a5a7c6afe81a7364978c00d76d6d39f79b8b18862c1598ea6af3',
]

# Since we link HDF5, ELPA and libxc statically (something suggested in the installation instructions),
# they are only build dependencies.
builddependencies = [
    ('buildtools', '%(toolchain_version)s', '',    True),
    ('HDF5',       '1.10.2',                '-MPI' ),     # 1.8 which we have in this toolchain did not work since it
                                                          # lacks Fortran2003 support, and we did not want to reinstall
                                                          # on a running system.
    ('ELPA',       '2016.11.001.pre'),                    # Taken from recent UGhent EasyConfigs
    ('libxc',      '4.2.3'),                              # Taken from recent UGhent EasyConfigs
]

# 
# The configure process is crucial. Part is done through configure. but part of it is
# also done by editing the make.inc file afterwards.
#
# First clean the environment to minimize unwanted influences of the configure process.
preconfigopts  = ''
preconfigopts += 'unset '
preconfigopts += 'BLAS_INC_DIR BLAS_LAPACK_DIR BLAS_LAPACK_MT_STATIC_LIBS BLAS_LAPACK_STATIC_LIBS BLAS_LIB_DIR BLAS_MT_STATIC_LIBS BLAS_STATIC_LIBS LIBBLAS LIBBLAS_MT '
preconfigopts += 'LAPACK_INC_DIR LAPACK_LIB_DIR LAPACK_MT_STATIC_LIBS LAPACK_STATIC_LIBS LIBLAPACK LIBLAPACK_MT LIBLAPACK_ONLY '
preconfigopts += 'FFTW_INC_DIR FFTW_LIB_DIR FFTW_STATIC_LIBS FFTW_STATIC_LIBS_MT FFT_INC_DIR FFT_LIB_DIR FFT_STATIC_LIBS FFT_STATIC_LIBS_MT LIBFFT LIBFFT_MT '
preconfigopts += 'BLACS_INC_DIR BLACS_LIB_DIR BLACS_MT_STATIC_LIBS BLACS_STATIC_LIBS LIBBLACS LIBBLACS_MT ' 
preconfigopts += 'LIBSCALAPACK LIBSCALAPACK_MT LIBSCALAPACK_MT_ONLY LIBSCALAPACK_ONLY SCALAPACK_INC_DIR SCALAPACK_LIB_DIR SCALAPACK_MT_STATIC_LIBS SCALAPACK_STATIC_LIBS '
preconfigopts += 'LDFLAGS CXX CXXFLAGS FCFLAGS MPICC MPICXX MPIFC MPIF77 '
preconfigopts += 'OPTFLAGS PRECFLAGS '
preconfigopts += 'MPICH_CC MPICH_CXX MPICH_FC MPICH_F77 MPICH_F90 '
preconfigopts += 'MPI_INC_DIR MPI_LIB_DIR MPI_LIB_SHARED MPI_LIB_STATIC '
preconfigopts += '; '
#
preconfigopts += 'CC_SEQ=icc ; FC_SEQ=ifort ; '  # Only set by EasyBuild when mpi is turned on...
preconfigopts += 'CC="$CC_SEQ" ';
#preconfigopts += "CFLAGS='-O2 -xHost -ftz -fp-speculation=safe -fp-model source' ; "
preconfigopts += 'FC="$FC_SEQ" ; '
preconfigopts += 'FFLAGS+=" -diag-disable 8291" ; '
preconfigopts += 'F77="$FC_SEQ" ; '
preconfigopts += 'F90="$FC_SEQ" ; '
preconfigopts += 'F90FLAGS="$FFLAGS" ; '
preconfigopts += 'export CPP="mpiicc -E -C" ; '
preconfigopts += 'env ; '
preconfigopts += 'pwd ; '

configopts  = '--enable-openmp --enable-parallel '
configopts += '--without-cuda '
configopts += '--with-scalapack=intel '
configopts += '--with-hdf5=${EBROOTHDF5} '
configopts += '--with-elpa-include=${EBROOTELPA}/include/modules  --with-elpa-lib=${EBROOTELPA}/lib/libelpa.a --with-elpa-version=2016 '
configopts += '&& '
# Corrections to make.inc:
# * Correct the HDF5_LIB variable since the detection in the configure script does 
#   not produce the correct result if there is more than one -L argument in the output
#   of hpfc -show
# * Enable libxc, this currently has to be done by hand.
configopts += 'sed --in-place=.orig '
configopts += '-e "s|^HDF5_LIB = .*|HDF5_LIB = ${EBROOTHDF5}/lib/libhdf5hl_fortran.a  ${EBROOTHDF5}/lib/libhdf5_hl.a ${EBROOTHDF5}/lib/libhdf5_fortran.a ${EBROOTHDF5}/lib/libhdf5.a ${EBROOTSZIP}/lib/libsz.a ${EBROOTZLIB}/lib/libz.a|" '
configopts += '-e "s|^\\(LD_LIBS *=\\)|\\1 ${EBROOTLIBXC}/lib/libxcf90.a ${EBROOTLIBXC}/lib/libxc.a|" '
configopts += '-e "s|^\\(DFLAGS *=.*\\)|\\1 -D__LIBXC|" '
configopts += 'make.inc'

#
# Build settings
#

#buildopts = 'all w90 epw gipaw want west yambo xspectra'  # plumed

build_cmd =  "make all gwl xspectra couple w90 epw gipaw -j 1 && "

build_cmd += "git clone https://gitlab.com/olivieroandreussi/Environ.git && "
build_cmd += "./install/addsonpatch.sh Environ Environ/src Modules -patch && "
build_cmd += "./Environ/patches/environpatch.sh -patch && "
build_cmd += "./install/makedeps.sh && "

# fix Makefiles, see https://environ.readthedocs.io/en/latest/install.html
# information is incomplete, we added a few more Makefiles to edit
build_cmd += "for i in PHonon/FD/Makefile PHonon/Gamma/Makefile PHonon/PH/Makefile PWCOND/src/Makefile TDDFPT/src/Makefile XSpectra/src/Makefile GWW/bse/Makefile GWW/head/Makefile GWW/pw4gww/Makefile PP/src/Makefile GWW/simple/Makefile EPW/src/Makefile;  do  dos2unix $i; sed -ie 's+../../dft-d3/libdftd3qe.a\s*$+../../dft-d3/libdftd3qe.a ../../PW/src/libpw.a+' $i; sed -ie 's+../../UtilXlib/libutil.a\s*$+../../UtilXlib/libutil.a ../../PW/src/libpw.a+' $i; done && "
build_cmd += "sed -ie 's+../../Modules/libqemod.a+../../Modules/libqemod.a libcp.a+' CPV/src/Makefile && "
build_cmd += "sed -ie 's+UtilXlib/libutil.a\s*$+UtilXlib/libutil.a ../../PW/src/libpw.a+' qe-gipaw-6.3/src/Makefile && "

build_cmd += "make all gwl xspectra couple w90 epw gipaw"

# parallel build tends to fail
parallel = 1

#
# Install steps
#
# Since there is no install target in the Makefile of QE 6.x, we need to do the
# installation process by hand.
# We also save make.inc and config.log since these files contain a lot of information
# about the configuration used during the compile process.
skipsteps = ['install']
postinstallcmds = [
    'mkdir -p %(installdir)s/bin',
    '/bin/cp -L %(builddir)s/qe-%(version)s/bin/* %(installdir)s/bin', 
    'mkdir -p %(installdir)s/Doc', 
    'cd %(builddir)s/qe-%(version)s/Doc ; /bin/cp README release-notes brillouin_zones.pdf constraints_HOWTO.pdf developer_man.pdf quantum_espresso.pdf user_guide.pdf %(installdir)s/Doc',
    'mkdir -p %(installdir)s/easybuild',
    'cp %(builddir)s/qe-%(version)s/make.inc           %(installdir)s/easybuild',
    'cp %(builddir)s/qe-%(version)s/install/config.log %(installdir)s/easybuild',
]

#
# Sanity check
#
sanity_check_paths = {
    'files': ['bin/%s' % x for x in ['pw.x', 'pp.x', 'ph.x', 'gipaw.x', 'wannier90.x']],
    'dirs':  ['bin', 'Doc'],
}

#
# Module file
#
modextravars = { 'ESPRESSO_ROOT' : '%(installdir)s' }
moduleclass = 'chem'
