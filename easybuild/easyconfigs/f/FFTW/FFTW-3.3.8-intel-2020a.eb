# Note that this package should be compiled on a compute node as otherwise 
# the tests will fail as MPI can't find which nodes to use.
name =    'FFTW'
version = '3.3.8'

local_buildset = '2020a'

homepage = 'http://www.fftw.org/'

whatis = [
   'Description: sFFTW is a portable FFT library known for its high performance',
   'This module provides static and shared libraries'
]

description = """
FFTW is a C subroutine library for computing the discrete Fourier transform
(DFT) in one or more dimensions, of arbitrary input size, and of both real and
complex data (as well as of even/odd data, i.e. the discrete cosine/sine
transforms or DCT/DST). 

The FFTW package was developed at MIT by Matteo Frigo and Steven G. Johnson.

Our benchmarks, performed on on a variety of platforms, show that FFTW's
performance is typically superior to that of other publicly available FFT
software, and is even competitive with vendor-tuned codes. In contrast to
vendor-tuned codes, however, FFTW's performance is portable: the same program
will perform well on most architectures without modification. Hence the name,
"FFTW," which stands for the somewhat whimsical title of "Fastest Fourier
Transform in the West."

This version is compiled with support for AVX, AVX2 and AVX512, MPI, OpenMP and
threads. Both static and shared libraries are provided.
"""

docurls = [
    'Web-based manual: http://www.fftw.org/fftw3_doc/',
    'Man pages for the tools that generate wisdom files',
    'Support for texinfo: info fftw3',
]

toolchain = {'name': 'intel', 'version': local_buildset}
# Note:
# - We let the configure script set appropriate optimization options and don't want 
#   easybuild to force the use of -xHost. In fact, FFTW is a multiplatform library
#   that will detect the CPU on use and chose the appropriate code path.
# - PIC: True is not needed as the configure script sets the -fPIC option itself.
toolchainopts = {'optarch': False}

source_urls = [homepage]
sources =     ['fftw-%(version)s.tar.gz']
patches = ['FFTW-%(version)s_fix-icc-no-gcc.patch']
checksums = [
    '6113262f6e92c5bd474f2875fa1b01054c4ad5040f6b0da7c03c98821d9ae303',  # fftw-3.3.8.tar.gz
    '1b3319b98a2ca4ead68290b3229385c0573e22749a5a2ffb49486a0bbb37dc1e',  # FFTW-3.3.8_fix-icc-no-gcc.patch
]

# As all our clusters support at least AVX nowadays, we don't need to
# build separate variants for SSE or SSE2.
use_sse =    False
use_sse2 =   False

use_avx =    True
use_avx2 =   True
use_avx512 = True

# KL: This is for AMD cpus only anyway and does not work with the Intel compilers.
use_fma4 =   False

# PRECISION
#
# no quad precision, requires GCC v4.6 or higher
# see also http://www.fftw.org/doc/Extended-and-quadruple-precision-in-Fortran.html
with_quad_prec = False

# Additional MPI interfaces needed for some packages.
with_mpi = True

# The testing fails when not done on a compute node as the MPI tests can't find a
# hostfile or so. But you can comment this out.
#runtest = 'check'

#parallel = 1

modextrapaths = {
    'INFOPATH' : 'share/info',
}

moduleclass = 'numlib'
