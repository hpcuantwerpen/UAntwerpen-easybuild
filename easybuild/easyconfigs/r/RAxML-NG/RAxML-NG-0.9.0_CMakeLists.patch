Patches various CMakeLists.txt files to use the EasyBuild-suggested compile options and compilers.
Also corrects the FindGMP.cmake block included with terraphast.
Author: Kurt Lust, UAntwerpen
diff -ru raxml-ng/CMakeLists.txt.orig                                  raxml-ng/CMakeLists.txt
diff -ru raxml-ng/src/CMakeLists.txt.orig                              raxml-ng/src/CMakeLists.txt
diff -ru raxml-ng/test/src/CMakeLists.txt.orig                         raxml-ng/test/src/CMakeLists.txt
diff -ru raxml-ng/libs/CMakeLists.txt.orig                             raxml-ng/libs/CMakeLists.txt
diff -ru raxml-ng/libs/pll-modules/CMakeLists.txt.orig                 raxml-ng/libs/pll-modules/CMakeLists.txt
diff -ru raxml-ng/libs/pll-modules/src/CMakeLists.txt.orig             raxml-ng/libs/pll-modules/src/CMakeLists.txt
diff -ru raxml-ng/libs/pll-modules/libs/libpll/src/CMakeLists.txt.orig raxml-ng/libs/pll-modules/libs/libpll/src/CMakeLists.txt
diff -ru raxml-ng/libs/terraphast/CMakeLists.txt.orig                  raxml-ng/libs/terraphast/CMakeLists.txt
diff -ru raxml-ng/libs/terraphast/cmake/FindGMP.cmake.orig             raxml-ng/libs/terraphast/cmake/FindGMP.cmake
--- raxml-ng/CMakeLists.txt.orig	2020-04-10 12:51:03.000000000 +0200
+++ raxml-ng/CMakeLists.txt	2020-04-10 14:11:40.000000000 +0200
@@ -1,7 +1,13 @@
 cmake_minimum_required (VERSION 3.0.2 FATAL_ERROR)
 
+# We'll borrow FindGMP from the terraphast submodule.
+# set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/libs/terraphast/cmake/")
+
+message(STATUS "RAxML-NG main directory configuration")
+
 set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
 set(CMAKE_DISABLE_SOURCE_CHANGES  ON)
+option(ENFORCE_COMPILER_FLAGS "Enforce compiler flags as chosen by the authors." ON)
 
 set(RAXML_BINARY_NAME "" CACHE STRING "Custom RAxML-NG binary name")
 set(USE_LIBPLL_CMAKE ON CACHE BOOL "Use CMake to build libpll and pll-modules")
@@ -14,7 +20,7 @@
 
 # set both following options to OFF to build a portable binary 
 # (don't worry, libpll will still have full SIMD support!)
-set (ENABLE_RAXML_SIMD OFF CACHE BOOL "Enable SIMD instructions in RAxML (non-portable but slightly faster)")
+#set (ENABLE_RAXML_SIMD OFF CACHE BOOL "Enable SIMD instructions in RAxML (non-portable but slightly faster)")
 set (ENABLE_PLLMOD_SIMD OFF CACHE BOOL "Enable SIMD instructions in pll-modules (non-portable but slightly faster)")
 
 # build a static binary
@@ -22,30 +28,63 @@
 
 set(USE_TERRAPHAST ON CACHE BOOL "Use phylogentic terraces library (terraphast) ")
 set(USE_GMP OFF CACHE BOOL "Use Gnu Muliple precision (GMP) library ")
+set(GMP_PREFIX "" CACHE STRING "Prefix of the GMP installation")
 
 set(ENABLE_PTHREADS ${USE_PTHREADS})
 
 if(USE_TERRAPHAST)
-  set(GCC_MIN_VERSION "5.4")
+  set(GCC_MIN_VERSION   "5.4")
   set(CLANG_MIN_VERSION "3.8")
+  set(INTEL_MIN_VERSION "19")  # Not sure, but that's what we could test, and the builtins in terraphast require at least 18.
   set(ENABLE_GMP ${USE_GMP})
 else()
-  set(GCC_MIN_VERSION "4.8")
+  set(GCC_MIN_VERSION   "4.8")
   set(CLANG_MIN_VERSION "3.8")
+  set(INTEL_MIN_VERSION "19")  # Not sure, but that's what we could test.
+  message(STATUS "RAxML-NG GMP always off when builing without Terraphase, independent of USE_GMP")
   set(ENABLE_GMP OFF)
 endif()
 
 #set(CMAKE_CXX_STANDARD 14)
 #set(CMAKE_CXX_EXTENSIONS OFF)
 
-# set these flags globally for all subprojects (libpll etc.)
-set (CMAKE_CXX_FLAGS_DEBUG    "-O3 -g" CACHE INTERNAL "")
-set (CMAKE_CXX_FLAGS_RELEASE  "-O3"    CACHE INTERNAL "")
-set (CMAKE_C_FLAGS_DEBUG    "-O3 -g" CACHE INTERNAL "")
-set (CMAKE_C_FLAGS_RELEASE  "-O3"    CACHE INTERNAL "")
-
 project (raxml-ng C CXX)
 
+if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+  set (WARN_FLAGS  "-Wall")
+  set (STD11_FLAGS "-std=c++11")
+  if (ENFORCE_COMPILER_FLAGS)
+    set (CMAKE_CXX_FLAGS          ""           CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_DEBUG    "-O0 -g"     CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_RELEASE  "-O2 -xHost" CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS            ""           CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_DEBUG      "-O0 -g"     CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_RELEASE    "-O2 -xHost" CACHE INTERNAL "")
+  endif()
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+  set (WARN_FLAGS  "-Wall -Wextra")
+  set (STD11_FLAGS "-std=c++11")
+  if (ENFORCE_COMPILER_FLAGS)
+    set (CMAKE_CXX_FLAGS          ""                  CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_DEBUG    "-O0 -g"            CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_RELEASE  "-O3 -march=native" CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS            ""                  CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_DEBUG      "-O0 -g"            CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_RELEASE    "-O3 -march=native" CACHE INTERNAL "")
+  endif()
+else() # Assume the GNU flags are OK for all other platforms.
+  set (WARN_FLAGS  "-Wall -Wextra")
+  set (STD11_FLAGS "-std=c++11")
+  if (ENFORCE_COMPILER_FLAGS)
+    set (CMAKE_CXX_FLAGS          ""                  CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_DEBUG    "-O0 -g"            CACHE INTERNAL "")
+    set (CMAKE_CXX_FLAGS_RELEASE  "-O3 -march=native" CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS            ""                  CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_DEBUG      "-O0 -g"            CACHE INTERNAL "")
+    set (CMAKE_C_FLAGS_RELEASE    "-O3 -march=native" CACHE INTERNAL "")
+  endif()
+endif()
+
 if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   # no support for static linking on Mac
   set(STATIC_BUILD OFF)
@@ -56,53 +95,73 @@
 endif()
 
 #check for minimum compiler versions
-message(STATUS "Compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} => ${CMAKE_CXX_COMPILER}")
+message(STATUS "RAxML-NG: C-compiler:   ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION} => ${CMAKE_C_COMPILER}")
+message(STATUS "RAxML-NG: C++-compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION} => ${CMAKE_CXX_COMPILER}")
+message(STATUS "RAxML-NG: Flags as picked up from the environment and defaults:")
+message(STATUS "RAxML-NG: * CMAKE_C_FLAGS =>           ${CMAKE_C_FLAGS}") 
+message(STATUS "RAxML-NG: * CMAKE_C_FLAGS_DEBUG =>     ${CMAKE_C_FLAGS_DEBUG}") 
+message(STATUS "RAxML-NG: * CMAKE_C_FLAGS_RELEASE =>   ${CMAKE_C_FLAGS_RELEASE}") 
+message(STATUS "RAxML-NG: * CMAKE_CXX_FLAGS =>         ${CMAKE_CXX_FLAGS}") 
+message(STATUS "RAxML-NG: * CMAKE_CXX_FLAGS_DEBUG =>   ${CMAKE_CXX_FLAGS_DEBUG}") 
+message(STATUS "RAxML-NG: * CMAKE_CXX_FLAGS_RELEASE => ${CMAKE_CXX_FLAGS_RELEASE}") 
+message(STATUS "RAxML-NG: Enforcing author's compiler flags: ENFORCE_COMPILER_FLAGS => ${ENFORCE_COMPILER_FLAGS}")
 
 if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   set(RAXML_COMPILER_TARGET_VERSION ${GCC_MIN_VERSION})
 elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
   set(RAXML_COMPILER_TARGET_VERSION ${CLANG_MIN_VERSION})
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+  set(RAXML_COMPILER_TARGET_VERSION ${Intel_MIN_VERSION})
 endif()
 
-
 if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS RAXML_COMPILER_TARGET_VERSION)
   message (FATAL_ERROR "${CMAKE_CXX_COMPILER_ID} compiler too old! Minimum required: ${RAXML_COMPILER_TARGET_VERSION}")
 endif()
 
 
 set (raxml-ng_VERSION_MAJOR 0)
-set (raxml-ng_VERSION_MINOR 8)
+set (raxml-ng_VERSION_MINOR 9)
 
 #set (CMAKE_BUILD_TYPE DEBUG)
 #set (CMAKE_BUILD_TYPE RELEASE)
-# set (CMAKE_VERBOSE_MAKEFILE ON)
+#set (CMAKE_VERBOSE_MAKEFILE ON)
 
 if (NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE "RELEASE")
 endif()
 
-message (STATUS "Building ${CMAKE_BUILD_TYPE}")
+message (STATUS "RAxML-NG Build type: ${CMAKE_BUILD_TYPE}")
 
-set (WARN_FLAGS               "-Wall -Wextra")
-set (CMAKE_CXX_FLAGS          "-std=c++11 ${WARN_FLAGS}")
-
-if (ENABLE_GMP)
-#find_package(GMP REQUIRED)
-  set(GMP_FOUND ON)
-  set(GMP_LIBRARIES gmpxx gmp)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_RAXML_GMP")
-endif()
-
-if (ENABLE_RAXML_SIMD)
-  include(CheckCXXCompilerFlag)
-  CHECK_CXX_COMPILER_FLAG(-mavx HAS_AVX)
-  CHECK_CXX_COMPILER_FLAG(-msse3 HAS_SSE3)
-  if(HAS_AVX)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx -D__AVX")
-  elseif(HAS_SSE3)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3 -D__SSE3")
-  endif()
-endif()
+if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+  set (WARN_FLAGS  "-Wall")
+  set (STD11_FLAGS "-std=c++11")
+elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+  set (WARN_FLAGS  "-Wall -Wextra")
+  set (STD11_FLAGS "-std=c++11")
+else() # Assume the GNU flags are OK for all other platforms.
+  set (WARN_FLAGS  "-Wall -Wextra")
+  set (STD11_FLAGS "-std=c++11")
+endif()
+
+set (RAXML_EXTRA_FLAGS  "${STD11_FLAGS} ${WARN_FLAGS}")
+
+#if (ENABLE_GMP)
+##find_package(GMP REQUIRED)
+#  set(GMP_FOUND ON)
+#  set(GMP_LIBRARIES gmpxx gmp)
+#  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_RAXML_GMP")
+#endif()
+
+#if (ENABLE_RAXML_SIMD)
+#  include(CheckCXXCompilerFlag)
+#  CHECK_CXX_COMPILER_FLAG(-mavx HAS_AVX)
+#  CHECK_CXX_COMPILER_FLAG(-msse3 HAS_SSE3)
+#  if(HAS_AVX)
+#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx -D__AVX")
+#  elseif(HAS_SSE3)
+#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3 -D__SSE3")
+#  endif()
+#endif()
 
 if(ENABLE_PLLMOD_SIMD)
   set(PLLMOD_AUTOCONF_ARGS "--enable-avx --enable-sse")
@@ -112,22 +171,21 @@
 
 if(ENABLE_PTHREADS)
   find_package(Threads REQUIRED)
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_RAXML_PTHREADS -pthread")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_RAXML_PTHREADS -pthread")
+#  set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -D_RAXML_PTHREADS -pthread")
+  set(RAXML_EXTRA_FLAGS "${RAXML_EXTRA_FLAGS} -D_RAXML_PTHREADS -pthread")
 endif()
 
 if(BUILD_AS_LIBRARY)
   # building shared library only works with CMake!
   set(USE_LIBPLL_CMAKE ON)
-
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_RAXML_BUILD_AS_LIB -fPIC")
+  set(RAXML_EXTRA_FLAGS "${RAXML_EXTRA_FLAGS} -D_RAXML_BUILD_AS_LIB -fPIC")
 endif()
 
 if(USE_TERRAPHAST)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_RAXML_TERRAPHAST")
+  set(RAXML_EXTRA_FLAGSS "${RAXML_EXTRA_FLAGS} -D_RAXML_TERRAPHAST")
 endif()
 
-message(STATUS "Using flags: ${CMAKE_CXX_FLAGS}")
+message(STATUS "RAxML-NG: Extra flags for RAxML-NG  => ${RAXML_EXTRA_FLAGS}")
 
 # build dependencies
 set(RAXML_LOCALDEPS_DIR ${PROJECT_BINARY_DIR}/localdeps)
@@ -135,6 +193,8 @@
 
 include_directories(${RAXML_LOCALDEPS_DIR}/include ${TERRACES_INCLUDE_DIR})
 
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${RAXML_EXTRA_FLAGS}")
+
 if(ENABLE_MPI)
   find_package(MPI)
   if(MPI_CXX_FOUND)
@@ -149,6 +209,15 @@
   endif()
 endif()
 
+message(STATUS "RAxML-NG: C++-compiler main code: ${CMAKE_CXX_COMPILER}")
+if (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
+  message(STATUS "RAxML-NG: Release flags main code: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
+elseif (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
+  message(STATUS "RAxML-NG: Debug flags main code: ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
+else()
+  message(STATUS "RAxML-NG: Flags main code: ${CMAKE_CXX_FLAGS}")
+endif()
+
 add_subdirectory(${PROJECT_SOURCE_DIR}/src)
 
 enable_testing()
--- raxml-ng/src/CMakeLists.txt.orig	2020-04-10 15:38:48.000000000 +0200
+++ raxml-ng/src/CMakeLists.txt	2020-04-10 14:12:27.000000000 +0200
@@ -1,3 +1,6 @@
+
+message(STATUS "RAxML-NG src directory configuration")
+
 file(GLOB RAXML_SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp 
                         ${PROJECT_SOURCE_DIR}/src/util/*.cpp
                         ${PROJECT_SOURCE_DIR}/src/io/*.cpp
@@ -34,6 +37,7 @@
   message(STATUS "RAxML-NG will be built as a library.")
   add_library(raxml_module MODULE ${RAXML_SOURCES})
 else()
+  message(STATUS "RAxML-NG will be built as an executable.")
   add_executable(raxml_module ${RAXML_SOURCES})
 endif()
 
@@ -56,7 +60,8 @@
 set(RAXML_LIBS ${LIBPLL_LIBS} m)
 
 if(USE_TERRAPHAST)
-  set(RAXML_LIBS ${RAXML_LOCALDEPS_DIR}/lib/libterraces.a ${RAXML_LIBS})
+  set(RAXML_LIBS terraces ${RAXML_LIBS})
+  add_dependencies(raxml_module terraces)
 endif()
 
 # export to the parent dir to use in GTest makefile
@@ -70,9 +75,6 @@
   target_link_libraries(raxml_module gcc_s gcc)
 endif()
 
-if(GMP_FOUND)
-  target_link_libraries(raxml_module ${GMP_LIBRARIES})
-endif()
 
 if(MPI_FOUND)
   target_link_libraries(raxml_module ${MPI_CXX_LIBRARIES})
@@ -90,13 +92,17 @@
 
 if(RAXML_BINARY_NAME)
   set_target_properties(raxml_module PROPERTIES OUTPUT_NAME ${RAXML_BINARY_NAME})	
+  message(STATUS "RAxML-NG: Name (without extension) of the build: ${RAXML_BINARY_NAME}")
 else()
   if(MPI_FOUND)
     set_target_properties(raxml_module PROPERTIES OUTPUT_NAME raxml-ng-mpi)
+    message(STATUS "RAxML-NG: Name (without extension) of the build: raxml-ng-mpi")
   elseif(STATIC_BUILD)
     set_target_properties(raxml_module PROPERTIES OUTPUT_NAME raxml-ng-static)
+    message(STATUS "RAxML-NG: Name (without extension) of the build: raxml-ng-static")
   else()
     set_target_properties(raxml_module PROPERTIES OUTPUT_NAME raxml-ng)
+    message(STATUS "RAxML-NG: Name (without extension) of the build: raxml-ng")
   endif()
 endif()
 
--- raxml-ng/test/src/CMakeLists.txt.orig	2020-04-07 17:16:15.000000000 +0200
+++ raxml-ng/test/src/CMakeLists.txt	2020-04-10 14:10:28.000000000 +0200
@@ -21,9 +21,9 @@
 
 target_link_libraries (raxml_test_module ${RAXML_LIBS})
 
-if(GMP_FOUND)
-  target_link_libraries(raxml_test_module ${GMP_LIBRARIES})
-endif()
+#if(GMP_FOUND)
+#  target_link_libraries(raxml_test_module ${GMP_LIBRARIES})
+#endif()
 
 target_link_libraries (raxml_test_module ${GTEST_BOTH_LIBRARIES} -pthread)
 
--- raxml-ng/libs/CMakeLists.txt.orig	2020-04-07 17:16:15.000000000 +0200
+++ raxml-ng/libs/CMakeLists.txt	2020-04-10 12:01:12.000000000 +0200
@@ -39,8 +39,8 @@
 if(USE_TERRAPHAST)
   set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/terraphast/cmake)
 
-  set(TERRAPHAST_USE_GMP OFF CACHE BOOL "terraphast: Use GMP")
-  set(TERRAPHAST_USE_THREADS OFF CACHE BOOL "terraphast: Use multi-threading")
+  set(TERRAPHAST_USE_GMP ${ENABLE_GMP} CACHE BOOL "terraphast: Use GMP")
+  set(TERRAPHAST_USE_THREADS ${ENABLE_PTHREADS} CACHE BOOL "terraphast: Use multi-threading")
   set(TERRAPHAST_BUILD_CLIB OFF CACHE BOOL "terraphast: Build the C library")
   set(TERRAPHAST_BUILD_APPS OFF CACHE BOOL "terraphast: Build the tools")
   set(TERRAPHAST_BUILD_TESTS OFF CACHE BOOL "terraphast: Build the tests")
--- raxml-ng/libs/pll-modules/CMakeLists.txt.orig	2020-04-07 17:16:21.000000000 +0200
+++ raxml-ng/libs/pll-modules/CMakeLists.txt	2020-04-08 16:42:05.000000000 +0200
@@ -2,6 +2,8 @@
 
 project (Pll-modules)
 
+message(STATUS "pll-modules: Configuring pll-modules") 
+
 if (NOT DEFINED PLLMODULES_LIBPLL_PATH)
   set(PLLMODULES_LIBPLL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/libs/libpll")
 endif()
@@ -19,10 +21,10 @@
 
 
 if(BUILD_PLLMODULES_SHARED)
-  message(STATUS "pll-modules shared build enabled")
+  message(STATUS "pll-modules: shared build enabled")
 endif() 
 if(BUILD_PLLMODULES_STATIC)
-  message(STATUS "pll-modules static build enabled")
+  message(STATUS "pll-modules: static build enabled")
 endif() 
 
 if (NOT PLLMODULES_SKIP_LIBPLL_BUILD)
--- raxml-ng/libs/pll-modules/src/CMakeLists.txt.orig	2020-04-07 17:16:21.000000000 +0200
+++ raxml-ng/libs/pll-modules/src/CMakeLists.txt	2020-04-08 16:42:50.000000000 +0200
@@ -1,9 +1,12 @@
 cmake_minimum_required (VERSION 2.8.10 FATAL_ERROR)
 
-set(PLLMOD_CFLAGS  "-Wall -Wsign-compare -D_GNU_SOURCE -std=c99 -O3")
+set(PLLMOD_CFLAGS  "-Wall -Wsign-compare -D_GNU_SOURCE -D_COMPILING_PLLMOD -std=c99")
+#set(PLLMOD_CFLAGS  "-Wall -Wsign-compare -D_GNU_SOURCE -std=c99")
 if(PLLMOD_DEBUG)
 	set(PLLMOD_CFLAGS "${PLLMOD_CFLAGS} -DDEBUG")
 endif()
+message(STATUS "pll-modules: Using CMAKE_C_FLAGS => ${CMAKE_C_FLAGS}")
+message(STATUS "pll-modules: Adding additional flags when compiling pll-modules components: PLLMOD_CFLAGS => ${PLLMOD_CFLAGS}")
 
 set(CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-undefined -Wl,dynamic_lookup")
 set(PLLMOD_INCLUDE_PATH  ${PLLMODULES_LIBPLL_PATH}/src/)
--- raxml-ng/libs/pll-modules/libs/libpll/src/CMakeLists.txt.orig	2020-04-07 17:16:24.000000000 +0200
+++ raxml-ng/libs/pll-modules/libs/libpll/src/CMakeLists.txt	2020-04-10 15:08:55.000000000 +0200
@@ -2,15 +2,15 @@
 
 include(CheckIncludeFile) 
 
-set (LIBPLL_BASE_FLAGS "-Wall -Wsign-compare -D_GNU_SOURCE -O3 -fPIC ")
+set (LIBPLL_BASE_FLAGS "-Wall -Wsign-compare -D_GNU_SOURCE -DCOMPILING_LIBPLL -fPIC ")
 
 if(PLLMOD_DEBUG)
   set(LIBPLL_BASE_FLAGS "${LIBPLL_BASE_FLAGS} -DDEBUG")
 endif()
 
-set (SSE_FLAGS "-msse3")
-set (AVX_FLAGS "-mavx")
-set (AVX2_FLAGS "-mfma -mavx2")
+set (SSE_FLAGS  "-msse3"       CACHE STRING "Flags to enable SSE3 optimizations in the compiler")
+set (AVX_FLAGS  "-mavx"        CACHE STRING "Flags to enable AVX optimizations in the compiler")
+set (AVX2_FLAGS "-mfma -mavx2" CACHE STRING "Flags to enable AVX2 optimizations in the compiler")
 
 find_package(BISON)
 find_package(FLEX)
@@ -148,28 +148,34 @@
 if (ENABLE_SSE)
   add_definitions(-DHAVE_SSE3)
   set(SIMD_FLAGS "${SIMD_FLAGS} ${SSE_FLAGS}")
-  message(STATUS "SSE enabled. To disable it, run cmake with -DENABLE_SSE=false")
+  message(STATUS "libpll: SSE enabled. To disable it, run cmake with -DENABLE_SSE=false")
+  message(STATUS "libpll: Using SSE_FLAGS => ${SSE_FLAGS} to compile SSE3-specific sources")
   set(LIBPLL_SOURCES ${LIBPLL_SOURCES} ${LIBPLL_SSE_SOURCES})
-  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_SSE_SOURCES} PROPERTIES COMPILE_FLAGS ${SSE_FLAGS} )
+  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_SSE_SOURCES} PROPERTIES COMPILE_FLAGS "${SSE_FLAGS} " ) # We should take into account that SSE_FLAGS can be empty.
 endif ()
 if (ENABLE_AVX)
   add_definitions(-DHAVE_AVX)
   set(SIMD_FLAGS "${SIMD_FLAGS} ${AVX_FLAGS}")
-  message(STATUS "AVX enabled. To disable it, run cmake with -DENABLE_AVX=false")
+  message(STATUS "libpll: AVX enabled. To disable it, run cmake with -DENABLE_AVX=false")
+  message(STATUS "libpll: Using AVX_FLAGS => ${AVX_FLAGS} to compile AVX-specific sources")
   set(LIBPLL_SOURCES ${LIBPLL_SOURCES} ${LIBPLL_AVX_SOURCES})
-  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_AVX_SOURCES} PROPERTIES COMPILE_FLAGS ${AVX_FLAGS} )
+  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_AVX_SOURCES} PROPERTIES COMPILE_FLAGS "${AVX_FLAGS} " )
 endif ()
 if (ENABLE_AVX2)
   add_definitions(-DHAVE_AVX2)
   set(SIMD_FLAGS "${SIMD_FLAGS} ${AVX2_FLAGS}")
-  message(STATUS "AVX2 enabled. To disable it, run cmake with -DENABLE_AVX2=false")
+  message(STATUS "libpll: AVX2 enabled. To disable it, run cmake with -DENABLE_AVX2=false")
+  message(STATUS "libpll: Using AVX2_FLAGS => ${AVX2_FLAGS} to compile AVX2-specific sources")
   set(LIBPLL_SOURCES ${LIBPLL_SOURCES} ${LIBPLL_AVX2_SOURCES})
-  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_AVX2_SOURCES} PROPERTIES COMPILE_FLAGS ${AVX2_FLAGS} )
+  SET_SOURCE_FILES_PROPERTIES( ${LIBPLL_AVX2_SOURCES} PROPERTIES COMPILE_FLAGS "${AVX2_FLAGS} " )
 endif ()
 
 add_definitions(-DHAVE_X86INTRIN_H)
 
+message(STATUS "libpll: As passed to CMake:  CMAKE_C_FLAGS     => ${CMAKE_C_FLAGS}")
+message(STATUS "libpll: Additional flags:    LIBPLL_BASE_FLAGS => ${LIBPLL_BASE_FLAGS}")
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBPLL_BASE_FLAGS}")
+message(STATUS "libpll: Hence actually used: CMAKE_C_FLAGS     => ${CMAKE_C_FLAGS}")
 
 # Set BUILD_LIBPLL_SHARED and BUILD_LIBPLL_SHARED if both are unset
 # Use BUILD_SHARED_LIBS to decide whether we should build shared or static libraries
--- raxml-ng/libs/terraphast/CMakeLists.txt.orig	2020-04-07 17:16:25.000000000 +0200
+++ raxml-ng/libs/terraphast/CMakeLists.txt	2020-04-10 16:34:06.000000000 +0200
@@ -10,11 +10,21 @@
 # unless some components were explicitely disabled from the parent project
 #####################################################################
 Option(TERRAPHAST_USE_GMP "Use GMP" ON)
-Option(TERRAPHAST_USE_THREADS "Use multi-threadin" ON)
+Option(TERRAPHAST_USE_THREADS "Use multi-threading" ON)
 Option(TERRAPHAST_BUILD_CLIB "Build the C library" ON)
 Option(TERRAPHAST_BUILD_APPS "Build the tools" ON)
 Option(TERRAPHAST_BUILD_TESTS "Build the tests" ON)
-Option(TERRAPHAST_ARCH_NATIVE "Use -march=native compiler flag" ON)
+Option(TERRAPHAST_ARCH_NATIVE "Use -O3 -march=native or equivalent compiler flag" ON)
+
+message(STATUS "terraphast: TERRAPHAST_USE_GMP     => ${TERRAPHAST_USE_GMP}")
+message(STATUS "terraphast: TERRAPHAST_USE_THREADS => ${TERRAPHAST_USE_THREADS}")
+message(STATUS "terraphast: TERRAPHAST_BUILD_CLIB  => ${TERRAPHAST_BUILD_CLIB}")
+message(STATUS "terraphast: TERRAPHAST_BUILD_APPS  => ${TERRAPHAST_BUILD_APPS}")
+message(STATUS "terraphast: TERRAPHAST_BUILD_TESTS => ${TERRAPHAST_BUILD_TESTS}")
+message(STATUS "terraphast: TERRAPHAST_ARCH_NATIVE => ${TERRAPHAST_ARCH_NATIVE}")
+if (GMP_PREFIX)
+  message(STATUS "terraphast: GMP_PREFIX             => ${GMP_PREFIX}")
+endif()
 
 #####################################################################
 # build library
@@ -87,11 +97,14 @@
 if(TERRAPHAST_USE_GMP)
 	find_package(GMP)
 	if(GMP_FOUND)
-		message(STATUS "GMP libraries found")
-		target_link_libraries(terraces gmpxx gmp)
+		message(STATUS "terraphast: GMP libraries found. Diagnostics:")
+		message(STATUS "terraphast: GMP_INCLUDE_DIR => ${GMP_INCLUDE_DIR}")
+		message(STATUS "terraphast: GMP_LIBRARIES   => ${GMP_LIBRARIES}")
+		message(STATUS "terraphast: GMPXX_LIBRARIES => ${GMPXX_LIBRARIES}")
+ 		target_link_libraries(terraces gmpxx gmp)
 		target_compile_definitions(terraces PUBLIC USE_GMP)
 	else()
-		message(FATAL_ERROR "GMP libraries not found! Disable them using -DTERRAPHAST_USE_GMP=OFF")
+		message(FATAL_ERROR "terraphast: GMP libraries not found! Disable them using -DTERRAPHAST_USE_GMP=OFF or use -DGMP_PREIX=... to point to the install location.")
 	endif()
 endif()
 
@@ -107,7 +120,7 @@
 	target_include_directories(terraces_c PUBLIC c_include)
 	target_link_libraries(terraces_c terraces)
 	if (NOT TERRAPHAST_USE_GMP)
-		message(FATAL_ERROR "The C library requires the GMP libraries to build! Enable them using -DTERRAPHAST_USE_GMP=ON")
+		message(FATAL_ERROR "terraphast: The C library requires the GMP libraries to build! Enable them using -DTERRAPHAST_USE_GMP=ON")
 	endif()
 
 	set(terraces_targets ${terraces_targets} terraces_c)
@@ -129,7 +142,7 @@
 if(TERRAPHAST_BUILD_APPS)
 	add_executable(app "app/app.cpp")
 	add_executable(validated_run "tools/validated_run.cpp")
-	add_executable(verbose_run "tools/verbose_run.cpp")
+#	add_executable(verbose_run "tools/verbose_run.cpp")
 	add_executable(isomorphic "tools/isomorphic.cpp")
 	add_executable(reroot "tools/reroot.cpp")
 	add_executable(subtree "tools/subtree.cpp")
@@ -137,7 +150,7 @@
 	add_executable(site_gen "tools/site_gen.cpp")
 	add_executable(nwk_to_dot "tools/nwk_to_dot.cpp")
 	target_link_libraries(validated_run terraces)
-	target_link_libraries(verbose_run terraces)
+#	target_link_libraries(verbose_run terraces)
 	target_link_libraries(isomorphic terraces)
 	target_link_libraries(reroot terraces)
 	target_link_libraries(subtree terraces)
@@ -146,7 +159,7 @@
 	target_link_libraries(nwk_to_dot terraces)
 	target_link_libraries(app terraces)
 
-	set(terraces_targets ${terraces_targets} app validated_run verbose_run isomorphic reroot subtree tree_gen site_gen nwk_to_dot)
+	set(terraces_targets ${terraces_targets} app validated_run isomorphic reroot subtree tree_gen site_gen nwk_to_dot)
 endif()
 
 #####################################################################
@@ -217,9 +230,19 @@
 	if(TERRAPHAST_BUILD_TESTS)
 		target_include_directories(unittests PRIVATE lib/gcc_clang)
 	endif()
-	set(terraces_flags -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Werror)
+    if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+    	# -Werror turns out to be too severe as there are implicit type casts in
+    	# the code that Intel considers to be dangerous.
+	    set(terraces_flags -Wall -Wextra -Wconversion -Wsign-conversion)
+    else()
+	    set(terraces_flags -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Werror)
+	endif()
 	if(TERRAPHAST_ARCH_NATIVE)
-		set(terraces_flags -march=native ${terraces_flags})
+		if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+            set(terraces_flags -O2 -xHost ${terraces_flags})
+        else()
+            set(terraces_flags -O3 -march=native ${terraces_flags})
+        endif()
 	endif()
 	target_compile_options(terraces PRIVATE ${terraces_flags})
 	if(TERRAPHAST_BUILD_CLIB)
@@ -232,9 +255,9 @@
 #####################################################################
 find_program(CLANG_TIDY_PATH NAMES "clang-tidy")
 if(NOT CLANG_TIDY_PATH)
-	message(STATUS "clang-tidy not found.")
+	message(STATUS "terraphast: clang-tidy not found.")
 else()
-	message(STATUS "clang-tidy found: ${CLANG_TIDY_PATH}")
+	message(STATUS "terraphast: clang-tidy found: ${CLANG_TIDY_PATH}")
 	set(CLANG_TIDY_COMMANDLINE "${CLANG_TIDY_PATH}" "-checks=llvm-namespace-comment -fix")
 endif()
 
--- raxml-ng/libs/terraphast/cmake/FindGMP.cmake.orig	2020-04-07 17:16:25.000000000 +0200
+++ raxml-ng/libs/terraphast/cmake/FindGMP.cmake	2020-04-09 17:33:39.000000000 +0200
@@ -1,13 +1,15 @@
-find_path(GMP_INCLUDE_DIR NAMES gmp.h gmpxx.h)
-find_library(GMP_LIBRARIES NAMES gmp libgmp)
-find_library(GMPXX_LIBRARIES NAMES gmpxx libgmpxx )
+set(GMP_PREFIX "" CACHE PATH "Path to GMP prefix")
+
+find_path(GMP_INCLUDE_DIR NAMES gmp.h gmpxx.h PATHS ${GMP_PREFIX}/include /usr/include /usr/local/include)
+find_library(GMP_LIBRARIES NAMES gmp libgmp  PATHS ${GMP_PREFIX}/lib ${GMP_PREFIX}/lib64 /usr/lib /usr/lib64 /usr/local/lib /usr/local/lib64)
+find_library(GMPXX_LIBRARIES NAMES gmpxx libgmpxx PATHS ${GMP_PREFIX}/lib ${GMP_PREFIX}/lib64 /usr/lib /usr/lib64 /usr/local/lib /usr/local/lib64)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(GMP DEFAULT_MSG GMP_INCLUDE_DIR GMP_LIBRARIES GMPXX_LIBRARIES)
-mark_as_advanced(GMP_INCLUDE_DIR GMP_LIBRARIES)
+mark_as_advanced(GMP_INCLUDE_DIR GMP_LIBRARIES GMPXX_LIBRARIES)
+add_library(gmpxx INTERFACE IMPORTED)
+set_target_properties(gmpxx PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${GMP_INCLUDE_DIR})
+set_target_properties(gmpxx PROPERTIES INTERFACE_LINK_LIBRARIES ${GMPXX_LIBRARIES})
 add_library(gmp INTERFACE IMPORTED)
 set_target_properties(gmp PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${GMP_INCLUDE_DIR})
 set_target_properties(gmp PROPERTIES INTERFACE_LINK_LIBRARIES ${GMP_LIBRARIES})
-add_library(gmpxx INTERFACE IMPORTED)
-set_target_properties(gmpxx PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${GMP_INCLUDE_DIR})
-set_target_properties(gmpxx PROPERTIES INTERFACE_LINK_LIBRARIES ${GMPXX_LIBRARIES})
\ No newline at end of file
