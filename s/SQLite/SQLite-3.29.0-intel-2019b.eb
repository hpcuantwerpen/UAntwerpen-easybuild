##
# This file is an EasyBuild reciPY as per https://github.com/hpcugent/easybuild
#
# Copyright:: Copyright 2012-2014 Uni.Lu/LCSB, NTUA
# Authors::   Fotis Georgatos <fotis@cern.ch>
# License::   MIT/GPL
# $Id$
#
# This work implements a part of the HPCBIOS project and is a component of the policy:
# http://hpcbios.readthedocs.org/en/latest/
##

easyblock = 'ConfigureMake'

name = 'SQLite'
version = '3.29.0'   # KL version check 20190729

homepage = 'http://www.sqlite.org/'

whatis = [
    'Description: SQL Database Engine in a C library',
    'This module provides the command line tool sqlite3 and static and shared libraries'
]

description = """
SQLite is an in-process library that implements a self-contained, serverless,
zero-configuration, transactional SQL database engine. The code for SQLite is in
the public domain and is thus free for use for any purpose, commercial or
private. SQLite is the most widely deployed database in the world with more
applications than we can count, including several high-profile projects.

SQLite is an embedded SQL database engine. Unlike most other SQL databases,
SQLite does not have a separate server process. SQLite reads and writes directly
to ordinary disk files. A complete SQL database with multiple tables, indices,
triggers, and views, is contained in a single disk file. The database file
format is cross-platform - you can freely copy a database between 32-bit and
64-bit systems or between big-endian and little-endian architectures. These
features make SQLite a popular choice as an Application File Format. Think of
SQLite not as a replacement for Oracle but as a replacement for fopen()

SQLite is a compact library. With all features enabled, the library size can be
less than 500KiB, depending on the target platform and compiler optimization
settings. (64-bit code is larger. And some compiler optimizations such as
aggressive function inlining and loop unrolling can cause the object code to be
much larger.) If optional features are omitted, the size of the SQLite library
can be reduced below 300KiB. SQLite can also be made to run in minimal stack
space (4KiB) and very little heap (100KiB), making SQLite a popular database
engine choice on memory constrained gadgets such as cellphones, PDAs, and MP3
players. There is a tradeoff between memory usage and speed. SQLite generally
runs faster the more memory you give it. Nevertheless, performance is usually
quite good even in low-memory environments. Depending on how it is used, SQLite
be faster than direct filesystem I/O.

This module provides the command line tool sqlite3 and static and shared libraries.
"""

docurls = [
    'Web-based documentation: http://www.sqlite.org/docs.html',
    'Man page for the sqlite3 command line tool',
]

toolchain = {'name': 'intel', 'version': '2019b'}
gcc_version = '8.3.0'

source_urls = ['http://www.sqlite.org/2019/']
version_minor_etc = version.split('.')[1:]
version_minor_etc += '0' * (3 - len(version_minor_etc))
version_str = '%(version_major)s' + ''.join('%02d' % int(x) for x in version_minor_etc)
sources = ['sqlite-autoconf-%s.tar.gz' % version_str]
checksums = ['8e7c1e2950b5b04c5944a981cb31fffbf9d2ddda939d536838ebc854481afd5b']

dependencies = [
    ('baselibs', '%(toolchain_version)s', '', ('GCCcore', gcc_version)),  # For libreadline
    ('Tcl',      '8.6.9'),
]

# From version 3.17 on, SQLite uses __builtin_sub_overflow(), __builtin_add_overflow(), 
# and __builtin_mul_overflow() which are supported in recent versions of GCC.
# However, it somehow wrongly detects support in the Intel compilers, resulting in
# a build failure.
# The tricky bit: I took the CFLAGS options that EasyBuild sets by default for the
# intel/2017c toolchain, then added -DSQLITE_DISABLE_INTRINSIC.
configopts = 'CFLAGS="-O2 -xHost -ftz -fp-speculation=safe -fp-model source -DSQLITE_DISABLE_INTRINSIC"'

sanity_check_paths = {
    'files': ['bin/sqlite3', 'include/sqlite3ext.h', 'include/sqlite3.h', 'lib/libsqlite3.a',
              'lib/libsqlite3.%s' % SHLIB_EXT],
    'dirs': ['lib/pkgconfig'],
}

moduleclass = 'devel'
